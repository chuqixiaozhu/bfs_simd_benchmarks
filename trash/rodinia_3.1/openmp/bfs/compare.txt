7c7
< Compiler options: -Wall -Wextra -g -qopenmp -O3 -qopt-report=5 -vec-threshold100 -o bfs_auto
---
> Compiler options: -Wall -Wextra -g -qopenmp -O3 -qopt-report=5 -vec-threshold0 -o bfs
90,92c90
<    remark #15344: loop was not vectorized: vector dependence prevents vectorization
<    remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)
<    remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)
---
>    remark #15542: loop was not vectorized: inner loop was already vectorized
95,97c93,98
<       remark #15389: vectorization support: reference h_graph_edges has unaligned access   [ bfs.cpp(141,15) ]
<       remark #15381: vectorization support: unaligned access used inside loop body
<       remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
---
>    <Peeled loop for vectorization>
>       remark #25015: Estimate of max trip count of loop=15
>    LOOP END
> 
>    LOOP BEGIN at bfs.cpp(137,5) inlined into bfs.cpp(32,2)
>       remark #15388: vectorization support: reference h_graph_edges has aligned access   [ bfs.cpp(141,15) ]
100,102c101,105
<       remark #15305: vectorization support: vector length 4
<       remark #15309: vectorization support: normalized vectorization overhead 0.019
<       remark #15450: unmasked unaligned unit stride loads: 1 
---
>       remark #15305: vectorization support: vector length 16
>       remark #15309: vectorization support: normalized vectorization overhead 0.017
>       remark #15300: LOOP WAS VECTORIZED
>       remark #15442: entire loop may be executed in remainder
>       remark #15448: unmasked aligned unit stride loads: 1 
107,109c110,111
<       remark #15477: vector cost: 38.500 
<       remark #15478: estimated potential speedup: 0.590 
<       remark #15487: type converts: 1 
---
>       remark #15477: vector cost: 35.930 
>       remark #15478: estimated potential speedup: 0.640 
111d112
<       remark #25439: unrolled with remainder by 2  
115c116
<    <Remainder>
---
>    <Remainder loop for vectorization>
119a121,125
> <Peeled loop for vectorization>
>    remark #25015: Estimate of max trip count of loop=15
> LOOP END
> 
> LOOP BEGIN at bfs.cpp(151,1) inlined into bfs.cpp(32,2)
122,123c128,129
<    remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
<    remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
---
>    remark #15388: vectorization support: reference h_updating_graph_mask has aligned access   [ bfs.cpp(159,5) ]
>    remark #15388: vectorization support: reference h_updating_graph_mask has aligned access   [ bfs.cpp(159,5) ]
125,129c131,135
<    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
<    remark #15305: vectorization support: vector length 4
<    remark #15309: vectorization support: normalized vectorization overhead 0.092
<    remark #15450: unmasked unaligned unit stride loads: 2 
<    remark #15451: unmasked unaligned unit stride stores: 1 
---
>    remark #15305: vectorization support: vector length 16
>    remark #15309: vectorization support: normalized vectorization overhead 0.030
>    remark #15300: LOOP WAS VECTORIZED
>    remark #15448: unmasked aligned unit stride loads: 1 
>    remark #15449: unmasked aligned unit stride stores: 1 
133,135c139,140
<    remark #15477: vector cost: 35.500 
<    remark #15478: estimated potential speedup: 0.590 
<    remark #15487: type converts: 1 
---
>    remark #15477: vector cost: 29.430 
>    remark #15478: estimated potential speedup: 0.730 
137d141
<    remark #25439: unrolled with remainder by 2  
141c145
< <Remainder>
---
> <Remainder loop for vectorization>
152c156
<         Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
---
>         Assigned     :   30[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm15]
155,159c159,163
<         Total         :     354
<             Global    :     105
<             Local     :     249
<         Regenerable   :     141
<         Spilled       :       3
---
>         Total         :     618
>             Global    :     176
>             Local     :     442
>         Regenerable   :     143
>         Spilled       :      37
163,167c167,171
<             Reads     :      31 [4.88e+01 ~ 2.4%]
<             Writes    :      20 [1.77e+02 ~ 8.8%]
<         Spills        :      64 bytes*
<             Reads     :      18 [1.24e+01 ~ 0.6%]
<             Writes    :      18 [4.88e+01 ~ 2.4%]
---
>             Reads     :      31 [4.88e+01 ~ 0.8%]
>             Writes    :      20 [1.77e+02 ~ 3.0%]
>         Spills        :     344 bytes*
>             Reads     :      90 [1.81e+02 ~ 3.1%]
>             Writes    :      60 [7.41e+01 ~ 1.3%]
276,278c280
<    remark #15344: loop was not vectorized: vector dependence prevents vectorization
<    remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)
<    remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)
---
>    remark #15542: loop was not vectorized: inner loop was already vectorized
281,283c283,288
<       remark #15389: vectorization support: reference h_graph_edges has unaligned access   [ bfs.cpp(141,15) ]
<       remark #15381: vectorization support: unaligned access used inside loop body
<       remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
---
>    <Peeled loop for vectorization>
>       remark #25015: Estimate of max trip count of loop=15
>    LOOP END
> 
>    LOOP BEGIN at bfs.cpp(137,5)
>       remark #15388: vectorization support: reference h_graph_edges has aligned access   [ bfs.cpp(141,15) ]
286,288c291,295
<       remark #15305: vectorization support: vector length 4
<       remark #15309: vectorization support: normalized vectorization overhead 0.019
<       remark #15450: unmasked unaligned unit stride loads: 1 
---
>       remark #15305: vectorization support: vector length 16
>       remark #15309: vectorization support: normalized vectorization overhead 0.017
>       remark #15300: LOOP WAS VECTORIZED
>       remark #15442: entire loop may be executed in remainder
>       remark #15448: unmasked aligned unit stride loads: 1 
293,295c300,301
<       remark #15477: vector cost: 38.500 
<       remark #15478: estimated potential speedup: 0.590 
<       remark #15487: type converts: 1 
---
>       remark #15477: vector cost: 35.930 
>       remark #15478: estimated potential speedup: 0.640 
297d302
<       remark #25439: unrolled with remainder by 2  
301c306
<    <Remainder>
---
>    <Remainder loop for vectorization>
305a311,315
> <Peeled loop for vectorization>
>    remark #25015: Estimate of max trip count of loop=15
> LOOP END
> 
> LOOP BEGIN at bfs.cpp(151,1)
308,309c318,319
<    remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
<    remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
---
>    remark #15388: vectorization support: reference h_updating_graph_mask has aligned access   [ bfs.cpp(159,5) ]
>    remark #15388: vectorization support: reference h_updating_graph_mask has aligned access   [ bfs.cpp(159,5) ]
311,315c321,325
<    remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
<    remark #15305: vectorization support: vector length 4
<    remark #15309: vectorization support: normalized vectorization overhead 0.092
<    remark #15450: unmasked unaligned unit stride loads: 2 
<    remark #15451: unmasked unaligned unit stride stores: 1 
---
>    remark #15305: vectorization support: vector length 16
>    remark #15309: vectorization support: normalized vectorization overhead 0.030
>    remark #15300: LOOP WAS VECTORIZED
>    remark #15448: unmasked aligned unit stride loads: 1 
>    remark #15449: unmasked aligned unit stride stores: 1 
319,321c329,330
<    remark #15477: vector cost: 35.500 
<    remark #15478: estimated potential speedup: 0.590 
<    remark #15487: type converts: 1 
---
>    remark #15477: vector cost: 29.430 
>    remark #15478: estimated potential speedup: 0.730 
323d331
<    remark #25439: unrolled with remainder by 2  
327c335
< <Remainder>
---
> <Remainder loop for vectorization>
338c346
<         Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
---
>         Assigned     :   31[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm15]
341,345c349,353
<         Total         :     346
<             Global    :     105
<             Local     :     241
<         Regenerable   :     129
<         Spilled       :       2
---
>         Total         :     610
>             Global    :     176
>             Local     :     434
>         Regenerable   :     131
>         Spilled       :      34
349,353c357,361
<             Reads     :      29 [4.88e+01 ~ 2.4%]
<             Writes    :      18 [1.77e+02 ~ 8.7%]
<         Spills        :      64 bytes*
<             Reads     :      26 [9.17e+00 ~ 0.5%]
<             Writes    :      20 [6.01e+01 ~ 3.0%]
---
>             Reads     :      29 [4.88e+01 ~ 0.8%]
>             Writes    :      18 [1.77e+02 ~ 3.1%]
>         Spills        :     328 bytes*
>             Reads     :      94 [1.56e+02 ~ 2.7%]
>             Writes    :      56 [7.27e+01 ~ 1.3%]
