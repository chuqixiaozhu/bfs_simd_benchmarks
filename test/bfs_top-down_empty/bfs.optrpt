Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++14 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(471,2) inlined into bfs.cpp(717,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(516,2) inlined into bfs.cpp(717,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (520:3) and edge_start (518:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (518:3) and edge_start (520:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (518:3) and edge_start (520:3)
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (520:3) and edge_start (518:3)
LOOP END

LOOP BEGIN at bfs.cpp(516,2) inlined into bfs.cpp(717,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(589,3) inlined into bfs.cpp(717,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(589,3) inlined into bfs.cpp(717,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(589,3) inlined into bfs.cpp(717,2)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(590,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(589,3) inlined into bfs.cpp(717,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(407,2) inlined into bfs.cpp(717,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(578,2) inlined into bfs.cpp(717,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(614,3) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(423,53) inlined into bfs.cpp(717,2)
   remark #15389: vectorization support: reference *_lambda_this_2->frontier[_lambda_this_2->i+U46_V] has unaligned access   [ bfs.cpp(424,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <*(*_lambda_this_2->.2+end*4)>, part of index is read from memory   [ bfs.cpp(426,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->parents[end]>, part of index is read from memory   [ bfs.cpp(425,21) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*(*_lambda_this_2->.2+(*(_lambda_this_2->parents+end*4))*4)>, part of index is read from memory   [ bfs.cpp(426,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.017
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 43.250 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(423,53) inlined into bfs.cpp(717,2)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(401,45) inlined into bfs.cpp(717,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->parents[_lambda_this_2->i+U42_V]>, part of index is linear but may overflow   [ bfs.cpp(403,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.023
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(401,45) inlined into bfs.cpp(717,2)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(481,51) inlined into bfs.cpp(717,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(717,2)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(501,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between n2 (501:4) and _lambda_this_2->h_graph_ends (505:4)
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->h_graph_ends (505:4) and n2 (501:4)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BFS(Vertex *, unsigned int *, const unsigned int &, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(407,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(423,53)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*_lambda_this_2->frontier[_lambda_this_2->i+U46_V]>, part of index is linear but may overflow   [ bfs.cpp(424,19) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->h_cost_19201[end]>, part of index is read from memory   [ bfs.cpp(426,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->parents[end]>, part of index is read from memory   [ bfs.cpp(425,21) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->h_cost_19201[*(_lambda_this_2->parents+end*4)]>, part of index is read from memory   [ bfs.cpp(426,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.003
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 73.000 
   remark #15478: estimated potential speedup: 0.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(423,53)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(401,45)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->parents[_lambda_this_2->i+U42_V]>, part of index is linear but may overflow   [ bfs.cpp(403,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.023
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(401,45)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: input(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(471,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(516,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (520:3) and edge_start (518:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (518:3) and edge_start (520:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (518:3) and edge_start (520:3)
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (520:3) and edge_start (518:3)
LOOP END

LOOP BEGIN at bfs.cpp(516,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(589,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(589,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(589,3)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(590,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(589,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(407,2) inlined into bfs.cpp(615,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(578,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(614,3) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(423,53) inlined into bfs.cpp(615,3)
   remark #15389: vectorization support: reference *_lambda_this_2->frontier[_lambda_this_2->i+U46_V] has unaligned access   [ bfs.cpp(424,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <*(*_lambda_this_2->.2+end*4)>, part of index is read from memory   [ bfs.cpp(426,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->parents[end]>, part of index is read from memory   [ bfs.cpp(425,21) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*(*_lambda_this_2->.2+(*(_lambda_this_2->parents+end*4))*4)>, part of index is read from memory   [ bfs.cpp(426,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.017
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 43.250 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(423,53) inlined into bfs.cpp(615,3)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(401,45) inlined into bfs.cpp(615,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->parents[_lambda_this_2->i+U42_V]>, part of index is linear but may overflow   [ bfs.cpp(403,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.023
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(401,45) inlined into bfs.cpp(615,3)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(481,51)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(498,3)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(501,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between n2 (501:4) and _lambda_this_2->h_graph_ends (505:4)
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->h_graph_ends (505:4) and n2 (501:4)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BFS_kernel(Vertex *, unsigned int *, BFS_Funs, unsigned int *&, unsigned int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(204,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (207:3) and offset_sum (206:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (206:3) and offset_sum (207:3)
LOOP END

LOOP BEGIN at bfs.cpp(204,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(282,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between base (287:22) and base (287:5)
   remark #15346: vector dependence: assumed ANTI dependence between base (287:5) and base (287:22)
LOOP END

LOOP BEGIN at bfs.cpp(282,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(316,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (319:4) and offset_sum (318:4)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (318:4) and offset_sum (319:4)
LOOP END

LOOP BEGIN at bfs.cpp(316,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(343,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(343,3)
   remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(345,4) ]
   remark #15388: vectorization support: reference new_frontier_tmp->_M_head_impl[base] has aligned access   [ /usr/include/c++/4.8.5/tuple(169,50) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 4.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.760 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(343,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at bfs.cpp(343,3)
<Remainder loop for vectorization>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(325,68)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->new_frontier_tmp (338:30) and _lambda_this_2->new_frontier[i] (338:5)
   remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier[i] (338:5) and _lambda_this_2->new_frontier_tmp (338:30)

   LOOP BEGIN at bfs.cpp(336,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->new_frontier_tmp (338:30) and _lambda_this_2->new_frontier[i] (338:5)
      remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier[i] (338:5) and _lambda_this_2->new_frontier_tmp (338:30)
   LOOP END

   LOOP BEGIN at bfs.cpp(336,4)
   <Remainder>
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(256,68)
   remark #15382: vectorization support: call to function __cilkrts_hyper_lookup(__cilkrts_hyperobject_base *) cannot be vectorized   [ /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/include/cilk/reducer.h(890,42) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->block_i (256:68) and *_lambda_this_2->new_frontier_tmp->_M_head_impl[base] (340:2)
   remark #15346: vector dependence: assumed FLOW dependence between *_lambda_this_2->new_frontier_tmp->_M_head_impl[base] (340:2) and _lambda_this_2->block_i (256:68)

   LOOP BEGIN at bfs.cpp(266,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (271:23) and base (271:6)
      remark #15346: vector dependence: assumed ANTI dependence between base (271:6) and base (271:23)
      remark #15346: vector dependence: assumed ANTI dependence between base (271:6) and base (271:23)
   LOOP END

   LOOP BEGIN at bfs.cpp(266,4)
   <Remainder>
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(230,52)
   remark #15382: vectorization support: call to function Vertex::put_children<struct lambda [] type at line 102478, col. 11, BFS_Funs>(Vertex *, unsigned int, unsigned int, BFS_Funs &, struct lambda [] type at line 102478, col. 11 &) cannot be vectorized   [ bfs.cpp(236,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between start (234:18) and start (236:9)
   remark #15346: vector dependence: assumed OUTPUT dependence between start (236:9) and start (234:18)
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(183,52)
   remark #15382: vectorization support: call to function __cilkrts_hyper_lookup(__cilkrts_hyperobject_base *) cannot be vectorized   [ /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/include/cilk/reducer.h(890,42) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->i (183:52) and *(_lambda_this_2->frontier_vertices+i*16) (189:26)
   remark #15346: vector dependence: assumed FLOW dependence between *(_lambda_this_2->frontier_vertices+i*16) (189:26) and _lambda_this_2->i (183:52)
LOOP END
===========================================================================

Begin optimization report for: Vertex::put_children<struct lambda [] type at line 102478, col. 11, BFS_Funs>(Vertex *, unsigned int, unsigned int, BFS_Funs &, struct lambda [] type at line 102478, col. 11 &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(83,4)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(110,10) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between this->out_neighbors (84:26) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (110:10)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (110:10) and this->out_neighbors (84:26)
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(67,42)
   remark #15527: loop was not vectorized: function call to __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(110,10) ]
LOOP END
===========================================================================
