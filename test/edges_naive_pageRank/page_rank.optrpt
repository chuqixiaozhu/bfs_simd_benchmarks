Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -lmemkind -qopt-report=5 -qopt-report-phase=vec -o page_rank

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(105,2) inlined into page_rank.cpp(207,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(115,2) inlined into page_rank.cpp(207,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(207,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(207,2)
      remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(182,3) ]
      remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(182,42) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(182,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(182,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 39 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 7.760 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(207,2)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(207,2)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(182,3) ]
      remark #15389: vectorization support: reference sum[j] has unaligned access   [ page_rank.cpp(182,42) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.200
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(182,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(182,3) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(207,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(73,3) inlined into page_rank.cpp(207,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(84,3) inlined into page_rank.cpp(207,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(207,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(207,2)
   remark #15388: vectorization support: reference rank has aligned access   [ page_rank.cpp(163,3) ]
   remark #15388: vectorization support: reference sum has aligned access   [ page_rank.cpp(164,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(207,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(207,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(170,1) inlined into page_rank.cpp(207,2)
   remark #15382: vectorization support: call to function __kmpc_atomic_float4_add cannot be vectorized   [ page_rank.cpp(175,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *n1s (172:12) and call:__kmpc_atomic_float4_add (175:3)
   remark #15346: vector dependence: assumed FLOW dependence between call:__kmpc_atomic_float4_add (175:3) and *n1s (172:12)
LOOP END
===========================================================================

Begin optimization report for: input(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(105,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(115,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(118,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(118,3)
      remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(182,3) ]
      remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(182,42) ]
      remark #15305: vectorization support: vector length 4
      remark #15399: vectorization support: unroll factor set to 2
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(182,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(182,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 39 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 7.760 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(118,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(118,3)
   <Remainder loop for vectorization>
      remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(182,3) ]
      remark #15389: vectorization support: reference sum[j] has unaligned access   [ page_rank.cpp(182,42) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 1.200
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(182,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(182,3) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at page_rank.cpp(181,2) inlined into page_rank.cpp(118,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(73,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(84,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(118,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(118,3)
   remark #15388: vectorization support: reference rank has aligned access   [ page_rank.cpp(163,3) ]
   remark #15388: vectorization support: reference sum has aligned access   [ page_rank.cpp(164,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(118,3)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1) inlined into page_rank.cpp(118,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(170,1) inlined into page_rank.cpp(118,3)
   remark #15382: vectorization support: call to function __kmpc_atomic_float4_add cannot be vectorized   [ page_rank.cpp(175,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *n1s (172:12) and call:__kmpc_atomic_float4_add (175:3)
   remark #15346: vector dependence: assumed FLOW dependence between call:__kmpc_atomic_float4_add (175:3) and *n1s (172:12)
LOOP END
===========================================================================

Begin optimization report for: page_rank(unsigned int *, unsigned int *, unsigned int *, float *, float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(181,2)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(181,2)
<Multiversioned v1>
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(182,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(182,42) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(182,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(182,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 39 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 7.760 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(181,2)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(181,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(182,3) ]
   remark #15389: vectorization support: reference sum[j] has unaligned access   [ page_rank.cpp(182,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.200
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(182,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(182,3) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at page_rank.cpp(181,2)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(181,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at page_rank.cpp(181,2)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1)
<Multiversioned v1>
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(163,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(164,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(161,1)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(161,1)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at page_rank.cpp(161,1)
<Remainder, Multiversioned v2>
LOOP END

LOOP BEGIN at page_rank.cpp(170,1)
   remark #15382: vectorization support: call to function __kmpc_atomic_float4_add cannot be vectorized   [ page_rank.cpp(175,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between n1s[j] (172:12) and at (175:3)
   remark #15346: vector dependence: assumed FLOW dependence between at (175:3) and n1s[j] (172:12)
LOOP END
===========================================================================

Begin optimization report for: print(float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(189,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(191,3) ]
LOOP END
===========================================================================
