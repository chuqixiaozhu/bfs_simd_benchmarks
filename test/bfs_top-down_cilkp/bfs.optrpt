Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++14 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(475,2) inlined into bfs.cpp(734,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(558,2) inlined into bfs.cpp(734,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (562:3) and edge_start (560:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (560:3) and edge_start (562:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (560:3) and edge_start (562:3)
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (562:3) and edge_start (560:3)
LOOP END

LOOP BEGIN at bfs.cpp(558,2) inlined into bfs.cpp(734,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(606,3) inlined into bfs.cpp(734,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(606,3) inlined into bfs.cpp(734,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(606,3) inlined into bfs.cpp(734,2)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(607,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(606,3) inlined into bfs.cpp(734,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(367,2) inlined into bfs.cpp(734,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(595,2) inlined into bfs.cpp(734,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(631,3) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(382,53) inlined into bfs.cpp(734,2)
   remark #15389: vectorization support: reference *_lambda_this_2->frontier[_lambda_this_2->i+U2d_V] has unaligned access   [ bfs.cpp(383,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <*(*_lambda_this_2->.2+end*4)>, part of index is read from memory   [ bfs.cpp(385,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->parents[end]>, part of index is read from memory   [ bfs.cpp(384,21) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*(*_lambda_this_2->.2+(*(_lambda_this_2->parents+end*4))*4)>, part of index is read from memory   [ bfs.cpp(385,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.017
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 43.250 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(382,53) inlined into bfs.cpp(734,2)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(362,45) inlined into bfs.cpp(734,2)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->parents[_lambda_this_2->i+U2a_V]>, part of index is linear but may overflow   [ bfs.cpp(363,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.023
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(362,45) inlined into bfs.cpp(734,2)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(504,51) inlined into bfs.cpp(734,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(521,3) inlined into bfs.cpp(734,2)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(524,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between n2 (524:4) and _lambda_this_2->h_graph_ends (528:4)
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->h_graph_ends (528:4) and n2 (524:4)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BFS(Vertex *, unsigned int *, unsigned int *, const unsigned int &, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(110,2) inlined into bfs.cpp(369,28)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (113:3) and offset_sum (112:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (112:3) and offset_sum (113:3)
LOOP END

LOOP BEGIN at bfs.cpp(110,2) inlined into bfs.cpp(369,28)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(250,3) inlined into bfs.cpp(369,28)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between base (252:22) and base (252:5)
   remark #15346: vector dependence: assumed ANTI dependence between base (252:5) and base (252:22)
LOOP END

LOOP BEGIN at bfs.cpp(250,3) inlined into bfs.cpp(369,28)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(280,3) inlined into bfs.cpp(369,28)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (283:4) and offset_sum (282:4)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (282:4) and offset_sum (283:4)
LOOP END

LOOP BEGIN at bfs.cpp(280,3) inlined into bfs.cpp(369,28)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(306,3) inlined into bfs.cpp(369,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(306,3) inlined into bfs.cpp(369,28)
   <Peeled loop for vectorization, Multiversioned v2>
   LOOP END

   LOOP BEGIN at bfs.cpp(306,3) inlined into bfs.cpp(369,28)
   <Multiversioned v2>
      remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(307,4) ]
      remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(307,22) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 5.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(306,3) inlined into bfs.cpp(369,28)
   <Alternate Alignment Vectorized Loop, Multiversioned v2>
   LOOP END

   LOOP BEGIN at bfs.cpp(306,3) inlined into bfs.cpp(369,28)
   <Remainder loop for vectorization, Multiversioned v2>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(367,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(89,52) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(382,53)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*_lambda_this_2->frontier[_lambda_this_2->i+U2d_V]>, part of index is linear but may overflow   [ bfs.cpp(383,19) ]
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->h_cost_16929[end]>, part of index is read from memory   [ bfs.cpp(385,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->parents[end]>, part of index is read from memory   [ bfs.cpp(384,21) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->h_cost_16929[*(_lambda_this_2->parents+end*4)]>, part of index is read from memory   [ bfs.cpp(385,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.003
   remark #15462: unmasked indexed (or gather) loads: 3 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 73.000 
   remark #15478: estimated potential speedup: 0.230 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(382,53)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(289,68) inlined into bfs.cpp(369,28)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ bfs.cpp(301,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->new_frontier_tmp[base] (300:4) and _lambda_this_2->new_frontier[i] (301:5)
   remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier[i] (301:5) and _lambda_this_2->new_frontier_tmp[base] (300:4)

   LOOP BEGIN at bfs.cpp(300,4) inlined into bfs.cpp(369,28)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at bfs.cpp(300,4) inlined into bfs.cpp(369,28)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at bfs.cpp(300,4) inlined into bfs.cpp(369,28)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(222,68) inlined into bfs.cpp(369,28)
   remark #15382: vectorization support: call to function __cilkrts_hyper_lookup(__cilkrts_hyperobject_base *) cannot be vectorized   [ /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/include/cilk/reducer.h(890,42) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier_tmp[base] (234:6) and _lambda_this_2->nums_in_blocks[_lambda_this_2->block_i+U24_V] (276:46)
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->nums_in_blocks[_lambda_this_2->block_i+U24_V] (276:46) and _lambda_this_2->new_frontier_tmp[base] (234:6)

   LOOP BEGIN at bfs.cpp(232,4) inlined into bfs.cpp(369,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier_tmp[base] (234:6) and _lambda_this_2->parallel_size (244:5)
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->parallel_size (244:5) and _lambda_this_2->new_frontier_tmp[base] (234:6)
   LOOP END

   LOOP BEGIN at bfs.cpp(232,4) inlined into bfs.cpp(369,28)
   <Remainder>
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(139,50) inlined into bfs.cpp(369,28)
   remark #15527: loop was not vectorized: function call to __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(141,21) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(130,52) inlined into bfs.cpp(369,28)
   remark #15382: vectorization support: call to function __intel_cilk_for_32 cannot be vectorized   [ bfs.cpp(139,50) ]
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(153,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _cilk_for_lambda_object_instance_R_2.new_frontier_tmp (139:50) and _cilk_for_lambda_object_instance_R_2.new_frontier_tmp (139:50)

   LOOP BEGIN at bfs.cpp(151,3) inlined into bfs.cpp(369,28)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(153,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between start.out_neighbors (152:25) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (153:21)
      remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (153:21) and start.out_neighbors (152:25)
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(89,52) inlined into bfs.cpp(369,28)
   remark #15382: vectorization support: call to function __cilkrts_hyper_lookup(__cilkrts_hyperobject_base *) cannot be vectorized   [ /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/include/cilk/reducer.h(890,42) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->i (89:52) and *(_lambda_this_2->frontier_vertices+i*16) (95:26)
   remark #15346: vector dependence: assumed FLOW dependence between *(_lambda_this_2->frontier_vertices+i*16) (95:26) and _lambda_this_2->i (89:52)
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(362,45)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->parents[_lambda_this_2->i+U2a_V]>, part of index is linear but may overflow   [ bfs.cpp(363,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.023
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(362,45)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: input(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(475,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(558,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (562:3) and edge_start (560:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (560:3) and edge_start (562:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (560:3) and edge_start (562:3)
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (562:3) and edge_start (560:3)
LOOP END

LOOP BEGIN at bfs.cpp(558,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(606,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(606,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(606,3)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(607,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(606,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(367,2) inlined into bfs.cpp(632,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(595,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(631,3) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(382,53) inlined into bfs.cpp(632,3)
   remark #15389: vectorization support: reference *_lambda_this_2->frontier[_lambda_this_2->i+U2d_V] has unaligned access   [ bfs.cpp(383,19) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <*(*_lambda_this_2->.2+end*4)>, part of index is read from memory   [ bfs.cpp(385,4) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <_lambda_this_2->parents[end]>, part of index is read from memory   [ bfs.cpp(384,21) ]
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*(*_lambda_this_2->.2+(*(_lambda_this_2->parents+end*4))*4)>, part of index is read from memory   [ bfs.cpp(385,18) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.017
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15462: unmasked indexed (or gather) loads: 2 
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 17 
   remark #15477: vector cost: 43.250 
   remark #15478: estimated potential speedup: 0.390 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(382,53) inlined into bfs.cpp(632,3)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(362,45) inlined into bfs.cpp(632,3)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15329: vectorization support: irregularly indexed store was emulated for the variable <_lambda_this_2->parents[_lambda_this_2->i+U2a_V]>, part of index is linear but may overflow   [ bfs.cpp(363,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.023
   remark #15463: unmasked indexed (or scatter) stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 5 
   remark #15477: vector cost: 11.000 
   remark #15478: estimated potential speedup: 0.450 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(362,45) inlined into bfs.cpp(632,3)
<Remainder>
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(504,51)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(521,3)
      remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(524,4) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between n2 (524:4) and _lambda_this_2->h_graph_ends (528:4)
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->h_graph_ends (528:4) and n2 (524:4)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BFS_kernel(Vertex *, unsigned int *, unsigned int *, unsigned int *&, unsigned int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(110,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (113:3) and offset_sum (112:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (112:3) and offset_sum (113:3)
LOOP END

LOOP BEGIN at bfs.cpp(110,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(250,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between base (252:22) and base (252:5)
   remark #15346: vector dependence: assumed ANTI dependence between base (252:5) and base (252:22)
LOOP END

LOOP BEGIN at bfs.cpp(250,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(280,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (283:4) and offset_sum (282:4)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (282:4) and offset_sum (283:4)
LOOP END

LOOP BEGIN at bfs.cpp(280,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(306,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(306,3)
   <Peeled loop for vectorization, Multiversioned v2>
   LOOP END

   LOOP BEGIN at bfs.cpp(306,3)
   <Multiversioned v2>
      remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(307,4) ]
      remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(307,22) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 5.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(306,3)
   <Alternate Alignment Vectorized Loop, Multiversioned v2>
   LOOP END

   LOOP BEGIN at bfs.cpp(306,3)
   <Remainder loop for vectorization, Multiversioned v2>
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(289,68)
   remark #15382: vectorization support: call to function ?1memcpy cannot be vectorized   [ bfs.cpp(301,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->new_frontier_tmp[base] (300:4) and _lambda_this_2->new_frontier[i] (301:5)
   remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier[i] (301:5) and _lambda_this_2->new_frontier_tmp[base] (300:4)

   LOOP BEGIN at bfs.cpp(300,4)
      remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

      LOOP BEGIN at bfs.cpp(300,4)
      <Multiversioned v2>
         remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
      LOOP END

      LOOP BEGIN at bfs.cpp(300,4)
      <Remainder, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(222,68)
   remark #15382: vectorization support: call to function __cilkrts_hyper_lookup(__cilkrts_hyperobject_base *) cannot be vectorized   [ /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/include/cilk/reducer.h(890,42) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier_tmp[base] (234:6) and _lambda_this_2->nums_in_blocks[_lambda_this_2->block_i+U24_V] (276:46)
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->nums_in_blocks[_lambda_this_2->block_i+U24_V] (276:46) and _lambda_this_2->new_frontier_tmp[base] (234:6)

   LOOP BEGIN at bfs.cpp(232,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between _lambda_this_2->new_frontier_tmp[base] (234:6) and _lambda_this_2->parallel_size (244:5)
      remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->parallel_size (244:5) and _lambda_this_2->new_frontier_tmp[base] (234:6)
   LOOP END

   LOOP BEGIN at bfs.cpp(232,4)
   <Remainder>
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(139,50)
   remark #15527: loop was not vectorized: function call to __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(141,21) ]
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(130,52)
   remark #15382: vectorization support: call to function __intel_cilk_for_32 cannot be vectorized   [ bfs.cpp(139,50) ]
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(153,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between _cilk_for_lambda_object_instance_R_2.parents_16698 (139:50) and _cilk_for_lambda_object_instance_R_2.parents_16698 (139:50)

   LOOP BEGIN at bfs.cpp(151,3)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(153,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between start.out_neighbors (152:25) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (153:21)
      remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (153:21) and start.out_neighbors (152:25)
   LOOP END
LOOP END

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(89,52)
   remark #15382: vectorization support: call to function __cilkrts_hyper_lookup(__cilkrts_hyperobject_base *) cannot be vectorized   [ /opt/intel/compilers_and_libraries_2017.1.132/linux/compiler/include/cilk/reducer.h(890,42) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between _lambda_this_2->i (89:52) and *(_lambda_this_2->frontier_vertices+i*16) (95:26)
   remark #15346: vector dependence: assumed FLOW dependence between *(_lambda_this_2->frontier_vertices+i*16) (95:26) and _lambda_this_2->i (89:52)
LOOP END
===========================================================================
