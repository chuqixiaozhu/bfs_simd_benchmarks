Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o cc

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cc.cpp(217,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at cc.cpp(220,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at cc.cpp(220,3)
      remark #15388: vectorization support: reference graph_active[k] has aligned access   [ cc.cpp(221,4) ]
      remark #15388: vectorization support: reference graph_component[k] has aligned access   [ cc.cpp(224,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 2.500
      remark #15301: FUSED LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 3.130 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at cc.cpp(223,3)
   LOOP END

   LOOP BEGIN at cc.cpp(220,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at cc.cpp(220,3)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at cc.cpp(151,2) inlined into cc.cpp(227,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at cc.cpp(125,1) inlined into cc.cpp(227,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between graph_component (134:4) and graph_component (134:4)
   remark #15346: vector dependence: assumed ANTI dependence between graph_component (134:4) and graph_component (134:4)
LOOP END

LOOP BEGIN at cc.cpp(125,1) inlined into cc.cpp(227,3)
<Remainder>
LOOP END

LOOP BEGIN at cc.cpp(161,1) inlined into cc.cpp(227,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at cc.cpp(161,1) inlined into cc.cpp(227,3)
   remark #15389: vectorization support: reference graph_updating_active has unaligned access   [ cc.cpp(164,5) ]
   remark #15388: vectorization support: reference graph_active has aligned access   [ cc.cpp(165,5) ]
   remark #15388: vectorization support: reference graph_active has aligned access   [ cc.cpp(169,5) ]
   remark #15389: vectorization support: reference graph_updating_active has unaligned access   [ cc.cpp(164,5) ]
   remark #15388: vectorization support: reference graph_active has aligned access   [ cc.cpp(165,5) ]
   remark #15388: vectorization support: reference graph_active has aligned access   [ cc.cpp(169,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.308
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 23 
   remark #15477: vector cost: 9.750 
   remark #15478: estimated potential speedup: 2.270 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at cc.cpp(161,1) inlined into cc.cpp(227,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: input(char *, unsigned int *&, unsigned int *&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cc.cpp(69,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ cc.cpp(72,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fscanf(FILE *, const char *, ...) (72:3) and *(graph_ends+index*4) (79:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between *(graph_ends+index*4) (79:3) and call:fscanf(FILE *, const char *, ...) (72:3)
LOOP END
===========================================================================

Begin optimization report for: input_serial(char *, unsigned int *&, unsigned int *&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cc.cpp(97,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: sssp_kernel(unsigned int *, unsigned int *, int *, int *, unsigned int *, unsigned int, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cc.cpp(125,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between graph_heads[edge_i] (127:19) and graph_component[head] (134:4)
   remark #15346: vector dependence: assumed FLOW dependence between graph_component[head] (134:4) and graph_heads[edge_i] (127:19)
LOOP END

LOOP BEGIN at cc.cpp(125,1)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: sssp(unsigned int *, unsigned int *, int *, int *, unsigned int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at cc.cpp(151,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at cc.cpp(125,1) inlined into cc.cpp(153,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between graph_heads (127:19) and graph_component (134:4)
   remark #15346: vector dependence: assumed FLOW dependence between graph_component (134:4) and graph_heads (127:19)
LOOP END

LOOP BEGIN at cc.cpp(125,1) inlined into cc.cpp(153,3)
<Remainder>
LOOP END

LOOP BEGIN at cc.cpp(161,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between graph_updating_active[i] (164:5) and graph_active[i] (169:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between graph_active[i] (169:5) and graph_updating_active[i] (164:5)
LOOP END

LOOP BEGIN at cc.cpp(161,1)
<Remainder>
LOOP END
===========================================================================
