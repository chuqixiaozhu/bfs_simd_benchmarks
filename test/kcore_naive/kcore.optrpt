Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o kcore

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at kcore.cpp(351,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at kcore.cpp(351,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at kcore.cpp(351,3)
      remark #15388: vectorization support: reference graph_cores[k] has aligned access   [ kcore.cpp(352,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at kcore.cpp(351,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at kcore.cpp(221,2) inlined into kcore.cpp(357,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at kcore.cpp(225,3) inlined into kcore.cpp(357,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at kcore.cpp(228,1) inlined into kcore.cpp(357,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between graph_updating_active (233:7) and graph_degrees (234:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between graph_degrees (234:7) and graph_updating_active (233:7)
LOOP END

LOOP BEGIN at kcore.cpp(228,1) inlined into kcore.cpp(357,3)
<Remainder>
LOOP END

LOOP BEGIN at kcore.cpp(243,1) inlined into kcore.cpp(357,3)
   remark #15382: vectorization support: call to function kcore_kernel(unsigned int *, unsigned int *, unsigned int *, unsigned int *, int *, const unsigned int &, const unsigned int &, unsigned int *) cannot be vectorized   [ kcore.cpp(254,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between bound_edge_i (250:6) and bound_edge_i (254:5)
LOOP END

LOOP BEGIN at kcore.cpp(243,1) inlined into kcore.cpp(357,3)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: kcore_kernel(unsigned int *, unsigned int *, unsigned int *, unsigned int *, int *, const unsigned int &, const unsigned int &, unsigned int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at kcore.cpp(194,1)
   remark #15382: vectorization support: call to function __kmpc_atomic_fixed4_add cannot be vectorized   [ kcore.cpp(201,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between graph_ends[edge_i] (197:18) and test_count (204:5)
   remark #15346: vector dependence: assumed FLOW dependence between test_count (204:5) and graph_ends[edge_i] (197:18)
LOOP END

LOOP BEGIN at kcore.cpp(194,1)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: input(char *, unsigned int *&, unsigned int *&, unsigned int *&, unsigned int *&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at kcore.cpp(101,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at kcore.cpp(77,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ kcore.cpp(80,3) ]
   remark #15382: vectorization support: call to function __kmpc_atomic_fixed4_add cannot be vectorized   [ kcore.cpp(86,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:fscanf(FILE *, const char *, ...) (80:3) and call:__kmpc_atomic_fixed4_add (86:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:__kmpc_atomic_fixed4_add (86:3) and call:fscanf(FILE *, const char *, ...) (80:3)
LOOP END
===========================================================================

Begin optimization report for: input_serial(char *, unsigned int *&, unsigned int *&, unsigned int *&, unsigned int *&)

    Report from: Vector optimizations [vec]


LOOP BEGIN at kcore.cpp(137,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at kcore.cpp(166,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: print(unsigned int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at kcore.cpp(175,2)
   remark #15382: vectorization support: call to function fprintf(FILE *, const char *, ...) cannot be vectorized   [ kcore.cpp(176,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between kc (177:3) and kc (177:3)
   remark #15346: vector dependence: assumed FLOW dependence between kc (177:3) and kc (177:3)
LOOP END
===========================================================================

Begin optimization report for: kcore(unsigned int *, unsigned int *, unsigned int *, unsigned int *, int *, unsigned int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at kcore.cpp(221,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at kcore.cpp(225,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at kcore.cpp(228,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between graph_updating_active[i] (233:7) and test_count (236:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between test_count (236:7) and graph_updating_active[i] (233:7)
LOOP END

LOOP BEGIN at kcore.cpp(228,1)
<Remainder>
LOOP END

LOOP BEGIN at kcore.cpp(243,1)
   remark #15382: vectorization support: call to function kcore_kernel(unsigned int *, unsigned int *, unsigned int *, unsigned int *, int *, const unsigned int &, const unsigned int &, unsigned int *) cannot be vectorized   [ kcore.cpp(254,5) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between bound_edge_i (250:6) and bound_edge_i (254:5)
LOOP END

LOOP BEGIN at kcore.cpp(243,1)
<Remainder>
LOOP END
===========================================================================
