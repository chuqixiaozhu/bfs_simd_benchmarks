Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o page_rank

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(159,2) inlined into page_rank.cpp(400,2)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(160,3) ]
LOOP END

LOOP BEGIN at page_rank.cpp(165,2) inlined into page_rank.cpp(400,2)
   remark #15389: vectorization support: reference tops[i] has unaligned access   [ page_rank.cpp(167,4) ]
   remark #15389: vectorization support: reference offsets[i] has unaligned access   [ page_rank.cpp(167,31) ]
   remark #15389: vectorization support: reference tops[i] has unaligned access   [ page_rank.cpp(169,4) ]
   remark #15389: vectorization support: reference offsets[i] has unaligned access   [ page_rank.cpp(169,23) ]
   remark #15389: vectorization support: reference tops[i] has unaligned access   [ page_rank.cpp(169,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <offsets[i+1]>, masked, part of index is linear but may overflow   [ page_rank.cpp(167,14) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.092
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 27 
   remark #15477: vector cost: 46.250 
   remark #15478: estimated potential speedup: 0.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(165,2) inlined into page_rank.cpp(400,2)
<Remainder>
LOOP END

LOOP BEGIN at page_rank.cpp(180,2) inlined into page_rank.cpp(400,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(266,2) inlined into page_rank.cpp(400,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ page_rank.cpp(274,3) ]
LOOP END

LOOP BEGIN at page_rank.cpp(210,2) inlined into page_rank.cpp(400,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(213,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (213:3) and n2 (215:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (215:3) and n2 (213:3)
LOOP END

LOOP BEGIN at page_rank.cpp(268,1) inlined into page_rank.cpp(400,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(268,1) inlined into page_rank.cpp(400,2)
   remark #15388: vectorization support: reference rank has aligned access   [ page_rank.cpp(270,4) ]
   remark #15388: vectorization support: reference sum has aligned access   [ page_rank.cpp(271,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(268,1) inlined into page_rank.cpp(400,2)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at page_rank.cpp(268,1) inlined into page_rank.cpp(400,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: input(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(159,2)
   remark #15527: loop was not vectorized: function call to fscanf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(160,3) ]
LOOP END

LOOP BEGIN at page_rank.cpp(165,2)
   remark #15389: vectorization support: reference tops[i] has unaligned access   [ page_rank.cpp(167,4) ]
   remark #15389: vectorization support: reference offsets[i] has unaligned access   [ page_rank.cpp(167,31) ]
   remark #15389: vectorization support: reference tops[i] has unaligned access   [ page_rank.cpp(169,4) ]
   remark #15389: vectorization support: reference offsets[i] has unaligned access   [ page_rank.cpp(169,23) ]
   remark #15389: vectorization support: reference tops[i] has unaligned access   [ page_rank.cpp(169,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <offsets[i+1]>, masked, part of index is linear but may overflow   [ page_rank.cpp(167,14) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.092
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 27 
   remark #15477: vector cost: 46.250 
   remark #15478: estimated potential speedup: 0.580 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(165,2)
<Remainder>
LOOP END

LOOP BEGIN at page_rank.cpp(180,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(266,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ page_rank.cpp(274,3) ]
LOOP END

LOOP BEGIN at page_rank.cpp(210,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(213,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (213:3) and n2 (215:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (215:3) and n2 (213:3)
LOOP END

LOOP BEGIN at page_rank.cpp(268,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(268,1)
   remark #15388: vectorization support: reference rank has aligned access   [ page_rank.cpp(270,4) ]
   remark #15388: vectorization support: reference sum has aligned access   [ page_rank.cpp(271,4) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 1.167
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 7 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(268,1)
<Alternate Alignment Vectorized Loop>
LOOP END

LOOP BEGIN at page_rank.cpp(268,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: page_rank(unsigned int *, unsigned int *, unsigned int *, unsigned int *, float *, float *, unsigned int *, unsigned int, unsigned int, int *, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(329,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at page_rank.cpp(333,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (343:6) and sum[n2] (343:6)
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (343:6) and sum[n2] (343:6)

   LOOP BEGIN at page_rank.cpp(334,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (343:6) and sum[n2] (343:6)
      remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (343:6) and sum[n2] (343:6)

      LOOP BEGIN at page_rank.cpp(340,5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[n2] (343:6) and sum[n2] (343:6)
         remark #15346: vector dependence: assumed ANTI dependence between sum[n2] (343:6) and sum[n2] (343:6)
      LOOP END

      LOOP BEGIN at page_rank.cpp(340,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(353,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (363:6) and sum[n2] (363:6)
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (363:6) and sum[n2] (363:6)

   LOOP BEGIN at page_rank.cpp(354,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (363:6) and sum[n2] (363:6)
      remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (363:6) and sum[n2] (363:6)

      LOOP BEGIN at page_rank.cpp(360,5)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[n2] (363:6) and sum[n2] (363:6)
         remark #15346: vector dependence: assumed ANTI dependence between sum[n2] (363:6) and sum[n2] (363:6)
      LOOP END

      LOOP BEGIN at page_rank.cpp(360,5)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Peeled loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Multiversioned v1>
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(374,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(374,42) ]
   remark #15305: vectorization support: vector length 4
   remark #15399: vectorization support: unroll factor set to 2
   remark #15309: vectorization support: normalized vectorization overhead 0.500
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(374,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(374,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 39 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 7.760 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Alternate Alignment Vectorized Loop, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(374,3) ]
   remark #15389: vectorization support: reference sum[j] has unaligned access   [ page_rank.cpp(374,42) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 2
   remark #15309: vectorization support: normalized vectorization overhead 1.200
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(374,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(374,3) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Remainder loop for vectorization, Multiversioned v1>
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Multiversioned v2>
   remark #15304: loop was not vectorized: non-vectorizable loop instance from multiversioning
LOOP END

LOOP BEGIN at page_rank.cpp(373,2)
<Remainder, Multiversioned v2>
LOOP END
===========================================================================

Begin optimization report for: print(float *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(381,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(383,3) ]
LOOP END
===========================================================================
