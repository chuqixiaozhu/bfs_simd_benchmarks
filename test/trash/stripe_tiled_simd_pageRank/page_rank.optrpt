Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o page_rank

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(66,2) inlined into page_rank.cpp(242,2)
   remark #15527: loop was not vectorized: function call to _mm_malloc(size_t, size_t) cannot be vectorized   [ page_rank.cpp(67,30) ]
LOOP END

LOOP BEGIN at page_rank.cpp(72,2) inlined into page_rank.cpp(242,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(98,2) inlined into page_rank.cpp(242,2)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_push_num_threads cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function .13 cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function omp_get_wtime() cannot be vectorized   [ page_rank.cpp(163,22) ]
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_push_num_threads cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function .14 cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function omp_get_wtime() cannot be vectorized   [ page_rank.cpp(203,20) ]
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ page_rank.cpp(204,2) ]
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_push_num_threads cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function .15 cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tiles_n1 (100:3) and tiles_n1 (165:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between tiles_n1 (165:1) and tiles_n1 (100:3)
LOOP END

LOOP BEGIN at page_rank.cpp(107,2) inlined into page_rank.cpp(242,2)
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ page_rank.cpp(108,3) ]
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ page_rank.cpp(109,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_free(void *) (108:3) and call:_mm_free(void *) (109:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_free(void *) (109:3) and call:_mm_free(void *) (108:3)
LOOP END

LOOP BEGIN at page_rank.cpp(156,1) inlined into page_rank.cpp(242,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(156,1) inlined into page_rank.cpp(242,2)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(158,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(159,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(158,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(159,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(156,1) inlined into page_rank.cpp(242,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(182,38) inlined into page_rank.cpp(242,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at page_rank.cpp(175,2) inlined into page_rank.cpp(242,2)
      remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(193,6) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between tops (176:18) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6)
      remark #15346: vector dependence: assumed FLOW dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6) and tops (176:18)

      LOOP BEGIN at page_rank.cpp(178,3) inlined into page_rank.cpp(242,2)
         remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(193,6) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between tiles_n1 (181:20) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6)
         remark #15346: vector dependence: assumed FLOW dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6) and tiles_n1 (181:20)

         LOOP BEGIN at page_rank.cpp(144,2) inlined into page_rank.cpp(242,2)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
            remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
         LOOP END
      LOOP END

      LOOP BEGIN at page_rank.cpp(144,2) inlined into page_rank.cpp(242,2)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
         remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(207,1) inlined into page_rank.cpp(242,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(207,1) inlined into page_rank.cpp(242,2)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(209,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(209,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(209,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(209,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(209,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(207,1) inlined into page_rank.cpp(242,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: input(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(66,2)
   remark #15527: loop was not vectorized: function call to _mm_malloc(size_t, size_t) cannot be vectorized   [ page_rank.cpp(67,30) ]
LOOP END

LOOP BEGIN at page_rank.cpp(72,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(98,2)
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_push_num_threads cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function .21 cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ page_rank.cpp(156,1) ]
   remark #15382: vectorization support: call to function omp_get_wtime() cannot be vectorized   [ page_rank.cpp(163,22) ]
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_push_num_threads cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function .22 cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ page_rank.cpp(165,1) ]
   remark #15382: vectorization support: call to function omp_get_wtime() cannot be vectorized   [ page_rank.cpp(203,20) ]
   remark #15382: vectorization support: call to function printf(const char *, ...) cannot be vectorized   [ page_rank.cpp(204,2) ]
   remark #15382: vectorization support: call to function __kmpc_ok_to_fork cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_push_num_threads cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_fork_call cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_serialized_parallel cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function .23 cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15382: vectorization support: call to function __kmpc_end_serialized_parallel cannot be vectorized   [ page_rank.cpp(207,1) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between tiles_n1 (100:3) and tiles_n1 (165:1)
   remark #15346: vector dependence: assumed OUTPUT dependence between tiles_n1 (165:1) and tiles_n1 (100:3)
LOOP END

LOOP BEGIN at page_rank.cpp(107,2)
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ page_rank.cpp(108,3) ]
   remark #15382: vectorization support: call to function _mm_free(void *) cannot be vectorized   [ page_rank.cpp(109,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_free(void *) (108:3) and call:_mm_free(void *) (109:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm_free(void *) (109:3) and call:_mm_free(void *) (108:3)
LOOP END

LOOP BEGIN at page_rank.cpp(156,1) inlined into page_rank.cpp(100,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(156,1) inlined into page_rank.cpp(100,3)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(158,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(159,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(158,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(159,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(156,1) inlined into page_rank.cpp(100,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(182,38) inlined into page_rank.cpp(100,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at page_rank.cpp(175,2) inlined into page_rank.cpp(100,3)
      remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(193,6) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between tops (176:18) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6)
      remark #15346: vector dependence: assumed FLOW dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6) and tops (176:18)

      LOOP BEGIN at page_rank.cpp(178,3) inlined into page_rank.cpp(100,3)
         remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(193,6) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between tiles_n1 (181:20) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6)
         remark #15346: vector dependence: assumed FLOW dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (193:6) and tiles_n1 (181:20)

         LOOP BEGIN at page_rank.cpp(144,2) inlined into page_rank.cpp(100,3)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
            remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
         LOOP END
      LOOP END

      LOOP BEGIN at page_rank.cpp(144,2) inlined into page_rank.cpp(100,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
         remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(207,1) inlined into page_rank.cpp(100,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(207,1) inlined into page_rank.cpp(100,3)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(209,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(209,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(209,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(209,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(209,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(207,1) inlined into page_rank.cpp(100,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: input2(std::string *, int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(125,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(125,2)
      remark #15388: vectorization support: reference grah.nneibor[i] has aligned access   [ page_rank.cpp(126,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 2 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 2.660 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(125,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(132,21)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END


Non-optimizable loops:


LOOP BEGIN at /usr/include/c++/4.8.5/bits/basic_ios.h(276,22) inlined into page_rank.cpp(138,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ /usr/include/c++/4.8.5/bits/locale_facets.h(869,8) ]
LOOP END
===========================================================================

Begin optimization report for: page_rank(unsigned int **, unsigned int **, unsigned int *, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(156,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(156,1)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(158,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(159,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(158,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(159,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(156,1)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(165,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at page_rank.cpp(175,2)
      remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(193,6) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (*(tiles_n1+i*8))[j] (181:20) and sum[*(n2s+i*4)] (148:3)
      remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and (*(tiles_n1+i*8))[j] (181:20)

      LOOP BEGIN at page_rank.cpp(178,3)
         remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(193,6) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between (*(tiles_n1+i*8))[j] (181:20) and sum[*(n2s+i*4)] (148:3)
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and (*(tiles_n1+i*8))[j] (181:20)

         LOOP BEGIN at page_rank.cpp(144,2) inlined into page_rank.cpp(196,6)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
            remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
         LOOP END
      LOOP END

      LOOP BEGIN at page_rank.cpp(144,2) inlined into page_rank.cpp(200,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
         remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (148:3) and sum[*(n2s+i*4)] (148:3)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(207,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(207,1)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(209,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(209,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(209,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(209,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(209,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(207,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: print()

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(216,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(218,3) ]
LOOP END
===========================================================================
