Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++14 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(720,2) inlined into bfs.cpp(893,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(761,2) inlined into bfs.cpp(893,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (763:3) and edge_start (762:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (762:3) and edge_start (763:3)
LOOP END

LOOP BEGIN at bfs.cpp(761,2) inlined into bfs.cpp(893,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(807,3) inlined into bfs.cpp(893,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(807,3) inlined into bfs.cpp(893,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(807,3) inlined into bfs.cpp(893,2)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(808,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(807,3) inlined into bfs.cpp(893,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(552,2) inlined into bfs.cpp(893,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(342,2) inlined into bfs.cpp(893,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(342,2) inlined into bfs.cpp(893,2)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(425,3) inlined into bfs.cpp(893,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
      remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
      remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
      remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(425,3) inlined into bfs.cpp(893,2)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(479,2) inlined into bfs.cpp(893,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(479,2) inlined into bfs.cpp(893,2)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(893,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(893,2)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(893,2)
      <Multiversioned v2>
         remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(505,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(505,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 5.850 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(893,2)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(893,2)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(746,2) inlined into bfs.cpp(893,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(749,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (749:3) and n2 (751:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (751:3) and n2 (749:3)
LOOP END

LOOP BEGIN at bfs.cpp(546,1) inlined into bfs.cpp(893,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(546,1) inlined into bfs.cpp(893,2)
   remark #15388: vectorization support: reference parents has aligned access   [ bfs.cpp(548,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(546,1) inlined into bfs.cpp(893,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(332,1) inlined into bfs.cpp(893,2)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(334,3) ]
   remark #15389: vectorization support: reference frontier[i] has unaligned access   [ bfs.cpp(334,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(335,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*h_graph_degrees[*(frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(334,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(332,1) inlined into bfs.cpp(893,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(357,2) inlined into bfs.cpp(893,2)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier (358:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21) and frontier (358:20)

   LOOP BEGIN at bfs.cpp(369,3) inlined into bfs.cpp(893,2)
      remark #15527: loop was not vectorized: function call to __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(398,2) inlined into bfs.cpp(893,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)

   LOOP BEGIN at bfs.cpp(408,3) inlined into bfs.cpp(893,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(408,3) inlined into bfs.cpp(893,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(487,2) inlined into bfs.cpp(893,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(893,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(893,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(893,2)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(499,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(499,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(893,2)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(893,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(565,1) inlined into bfs.cpp(893,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost (569:4) and h_cost (569:4)
   remark #15346: vector dependence: assumed ANTI dependence between h_cost (569:4) and h_cost (569:4)
LOOP END

LOOP BEGIN at bfs.cpp(565,1) inlined into bfs.cpp(893,2)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(796,2) inlined into bfs.cpp(893,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(541,2) ]
LOOP END
===========================================================================

Begin optimization report for: BFS_kernel(unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *&, unsigned int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(342,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
LOOP END

LOOP BEGIN at bfs.cpp(342,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(425,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
   remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
LOOP END

LOOP BEGIN at bfs.cpp(425,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(479,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
LOOP END

LOOP BEGIN at bfs.cpp(479,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(504,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(504,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(504,3)
      remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(505,4) ]
      remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(505,22) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 2.440 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(504,3)
   <Alternate Alignment Vectorized Loop>
   LOOP END

   LOOP BEGIN at bfs.cpp(504,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(332,1)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(334,3) ]
   remark #15389: vectorization support: reference *frontier[i] has unaligned access   [ bfs.cpp(334,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(335,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <h_graph_degrees[*(*frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(334,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(332,1)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(357,2)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *frontier (358:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21) and *frontier (358:20)

   LOOP BEGIN at bfs.cpp(369,3)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between graph_edges[edge_i] (370:19) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21)
      remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21) and graph_edges[edge_i] (370:19)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(398,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)

   LOOP BEGIN at bfs.cpp(408,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(408,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(487,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(498,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(498,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(499,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(499,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BFS(unsigned int *, unsigned int *, unsigned int *, const unsigned int &, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(552,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(342,2) inlined into bfs.cpp(554,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(342,2) inlined into bfs.cpp(554,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(425,3) inlined into bfs.cpp(554,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
      remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
      remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
      remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(425,3) inlined into bfs.cpp(554,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(479,2) inlined into bfs.cpp(554,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(479,2) inlined into bfs.cpp(554,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(554,28)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(554,28)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(554,28)
      <Multiversioned v2>
         remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(505,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(505,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 5.850 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(554,28)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(554,28)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(546,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(546,1)
   remark #15388: vectorization support: reference parents has aligned access   [ bfs.cpp(548,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(546,1)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(332,1) inlined into bfs.cpp(554,28)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(334,3) ]
   remark #15389: vectorization support: reference frontier[i] has unaligned access   [ bfs.cpp(334,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(335,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*h_graph_degrees[*(frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(334,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(332,1) inlined into bfs.cpp(554,28)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(357,2) inlined into bfs.cpp(554,28)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier (358:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21) and frontier (358:20)

   LOOP BEGIN at bfs.cpp(369,3) inlined into bfs.cpp(554,28)
      remark #15527: loop was not vectorized: function call to __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(398,2) inlined into bfs.cpp(554,28)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)

   LOOP BEGIN at bfs.cpp(408,3) inlined into bfs.cpp(554,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(408,3) inlined into bfs.cpp(554,28)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(487,2) inlined into bfs.cpp(554,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(554,28)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(554,28)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(554,28)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(499,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(499,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(554,28)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(554,28)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(565,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost[end] (569:4) and h_cost[*(?+end*4)] (569:4)
   remark #15346: vector dependence: assumed ANTI dependence between h_cost[*(?+end*4)] (569:4) and h_cost[end] (569:4)
LOOP END

LOOP BEGIN at bfs.cpp(565,1)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: input(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(720,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(761,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (763:3) and edge_start (762:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (762:3) and edge_start (763:3)
LOOP END

LOOP BEGIN at bfs.cpp(761,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(807,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(807,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(807,3)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(808,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(807,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(552,2) inlined into bfs.cpp(826,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(342,2) inlined into bfs.cpp(826,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (344:3) and offset_sum (345:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (345:3) and offset_sum (344:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(342,2) inlined into bfs.cpp(826,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(425,3) inlined into bfs.cpp(826,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
      remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
      remark #15346: vector dependence: assumed ANTI dependence between base (427:5) and base (427:22)
      remark #15346: vector dependence: assumed FLOW dependence between base (427:22) and base (427:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(425,3) inlined into bfs.cpp(826,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(479,2) inlined into bfs.cpp(826,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (481:3) and offset_sum (482:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (482:3) and offset_sum (481:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(479,2) inlined into bfs.cpp(826,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(826,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(826,3)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(826,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(505,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(505,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 5.850 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(826,3)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(504,3) inlined into bfs.cpp(826,3)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(746,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(749,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (749:3) and n2 (751:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (751:3) and n2 (749:3)
LOOP END

LOOP BEGIN at bfs.cpp(546,1) inlined into bfs.cpp(826,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(546,1) inlined into bfs.cpp(826,3)
   remark #15388: vectorization support: reference parents has aligned access   [ bfs.cpp(548,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(546,1) inlined into bfs.cpp(826,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(332,1) inlined into bfs.cpp(826,3)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(334,3) ]
   remark #15389: vectorization support: reference frontier[i] has unaligned access   [ bfs.cpp(334,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(335,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*h_graph_degrees[*(frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(334,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(332,1) inlined into bfs.cpp(826,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(357,2) inlined into bfs.cpp(826,3)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier (358:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (371:21) and frontier (358:20)

   LOOP BEGIN at bfs.cpp(369,3) inlined into bfs.cpp(826,3)
      remark #15527: loop was not vectorized: function call to __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(371,21) ]
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(398,2) inlined into bfs.cpp(826,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)

   LOOP BEGIN at bfs.cpp(408,3) inlined into bfs.cpp(826,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (410:5) and new_frontier_tmp (410:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(408,3) inlined into bfs.cpp(826,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(487,2) inlined into bfs.cpp(826,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(826,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(826,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(826,3)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(499,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(499,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(826,3)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(498,3) inlined into bfs.cpp(826,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(565,1) inlined into bfs.cpp(826,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost (569:4) and h_cost (569:4)
   remark #15346: vector dependence: assumed ANTI dependence between h_cost (569:4) and h_cost (569:4)
LOOP END

LOOP BEGIN at bfs.cpp(565,1) inlined into bfs.cpp(826,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(796,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(541,2) ]
LOOP END
===========================================================================
