Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/home/zpeng/lib/include -Wall -Wextra -g -std=c++11 -qopenmp -O3 -xMIC-AVX512 -qopt-report=5 -qopt-report-phase=vec -inline-level=2 -inline-forceinline -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(480,2) inlined into bfs.cpp(649,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(485,2) inlined into bfs.cpp(649,2)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(487,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(487,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(489,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(489,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(485,2) inlined into bfs.cpp(649,2)
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(487,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(489,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <tile_offsets[i+1]>, masked, part of index is linear but may overflow   [ bfs.cpp(487,20) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.415
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 2.560 
   remark #15478: estimated potential speedup: 6.150 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(485,2) inlined into bfs.cpp(649,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(487,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(487,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(489,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(489,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(560,2) inlined into bfs.cpp(649,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(571,3) inlined into bfs.cpp(649,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(571,3) inlined into bfs.cpp(649,2)
         remark #15389: vectorization support: reference h_cost[i] has unaligned access   [ bfs.cpp(572,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.310 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(571,3) inlined into bfs.cpp(649,2)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference h_cost[i] has unaligned access   [ bfs.cpp(572,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.364
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(515,2) inlined into bfs.cpp(649,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(518,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (518:3) and n2 (520:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (520:3) and n2 (518:3)
LOOP END
===========================================================================

Begin optimization report for: input(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(480,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(485,2)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(487,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(487,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(489,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(489,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(485,2)
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(487,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(489,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <tile_offsets[i+1]>, masked, part of index is linear but may overflow   [ bfs.cpp(487,20) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.415
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 2.560 
   remark #15478: estimated potential speedup: 6.150 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(485,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(487,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(487,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(489,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(489,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(560,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(571,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(571,3)
         remark #15389: vectorization support: reference h_cost[i] has unaligned access   [ bfs.cpp(572,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.310 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(571,3)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference h_cost[i] has unaligned access   [ bfs.cpp(572,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.364
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(515,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(518,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (518:3) and n2 (520:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (520:3) and n2 (518:3)
LOOP END
===========================================================================

Begin optimization report for: BFS(unsigned int *, unsigned int *, int *, int *, int *, int *, unsigned int *, unsigned int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(321,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(327,3)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(253,46) inlined into bfs.cpp(328,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(233,2) inlined into bfs.cpp(328,4)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at bfs.cpp(240,3) inlined into bfs.cpp(328,4)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at bfs.cpp(248,4) inlined into bfs.cpp(328,4)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at bfs.cpp(82,2) inlined into bfs.cpp(328,4)
               remark #15523: loop was not vectorized: loop control variable edge_i was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at bfs.cpp(82,2) inlined into bfs.cpp(328,4)
         remark #15523: loop was not vectorized: loop control variable edge_i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(253,46) inlined into bfs.cpp(344,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(233,2) inlined into bfs.cpp(344,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at bfs.cpp(240,3) inlined into bfs.cpp(344,3)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at bfs.cpp(248,4) inlined into bfs.cpp(344,3)
            remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

            LOOP BEGIN at bfs.cpp(82,2) inlined into bfs.cpp(344,3)
               remark #15523: loop was not vectorized: loop control variable edge_i was found, but loop iteration count cannot be computed before executing the loop
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at bfs.cpp(82,2) inlined into bfs.cpp(344,3)
         remark #15523: loop was not vectorized: loop control variable edge_i was found, but loop iteration count cannot be computed before executing the loop
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(369,3)
   remark #15382: vectorization support: call to function _mm512_mask_storeu_epi32(void *, unsigned short, __m512i) cannot be vectorized   [ bfs.cpp(405,5) ]
   remark #15382: vectorization support: call to function _mm512_mask_storeu_epi32(void *, unsigned short, __m512i) cannot be vectorized   [ bfs.cpp(407,5) ]
   remark #15382: vectorization support: call to function _mm512_mask_storeu_epi32(void *, unsigned short, __m512i) cannot be vectorized   [ bfs.cpp(422,4) ]
   remark #15382: vectorization support: call to function _mm512_mask_storeu_epi32(void *, unsigned short, __m512i) cannot be vectorized   [ bfs.cpp(424,4) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between is_active_side[side_id] (371:5) and h_graph_mask[vertex_id] (423:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between h_graph_mask[vertex_id] (423:4) and is_active_side[side_id] (371:5)

   LOOP BEGIN at bfs.cpp(397,4)
      remark #15523: loop was not vectorized: loop control variable vertex_id was found, but loop iteration count cannot be computed before executing the loop
   LOOP END
LOOP END
===========================================================================
