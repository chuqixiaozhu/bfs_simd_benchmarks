Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++14 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(370,2) inlined into bfs.cpp(562,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(412,2) inlined into bfs.cpp(562,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (416:3) and edge_start (413:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (413:3) and edge_start (416:3)
LOOP END

LOOP BEGIN at bfs.cpp(412,2) inlined into bfs.cpp(562,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(455,3) inlined into bfs.cpp(562,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(455,3) inlined into bfs.cpp(562,2)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(455,3) inlined into bfs.cpp(562,2)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(456,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(455,3) inlined into bfs.cpp(562,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(293,2) inlined into bfs.cpp(562,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(83,2) inlined into bfs.cpp(562,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(83,2) inlined into bfs.cpp(562,2)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(197,3) inlined into bfs.cpp(562,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
      remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
      remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
      remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(197,3) inlined into bfs.cpp(562,2)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(227,2) inlined into bfs.cpp(562,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(227,2) inlined into bfs.cpp(562,2)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(562,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(562,2)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(562,2)
      <Multiversioned v2>
         remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(254,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(254,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 5.850 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(562,2)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(562,2)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(396,2) inlined into bfs.cpp(562,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(399,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (399:3) and n2 (401:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (401:3) and n2 (399:3)
LOOP END

LOOP BEGIN at bfs.cpp(287,1) inlined into bfs.cpp(562,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(287,1) inlined into bfs.cpp(562,2)
   remark #15388: vectorization support: reference parents has aligned access   [ bfs.cpp(289,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(287,1) inlined into bfs.cpp(562,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(59,1) inlined into bfs.cpp(562,2)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(61,3) ]
   remark #15389: vectorization support: reference frontier[i] has unaligned access   [ bfs.cpp(61,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(62,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*h_graph_degrees[*(frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(61,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(59,1) inlined into bfs.cpp(562,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(135,2) inlined into bfs.cpp(562,2)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier (136:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22) and frontier (136:20)

   LOOP BEGIN at bfs.cpp(140,3) inlined into bfs.cpp(562,2)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (145:6) and new_frontier_tmp (150:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (150:5) and new_frontier_tmp (145:6)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(171,2) inlined into bfs.cpp(562,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)

   LOOP BEGIN at bfs.cpp(181,3) inlined into bfs.cpp(562,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(181,3) inlined into bfs.cpp(562,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(236,2) inlined into bfs.cpp(562,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(562,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(562,2)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(562,2)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(248,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(248,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(562,2)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(562,2)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(307,1) inlined into bfs.cpp(562,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost (311:4) and h_cost (311:4)
   remark #15346: vector dependence: assumed ANTI dependence between h_cost (311:4) and h_cost (311:4)
LOOP END

LOOP BEGIN at bfs.cpp(307,1) inlined into bfs.cpp(562,2)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(444,2) inlined into bfs.cpp(562,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(282,2) ]
LOOP END
===========================================================================

Begin optimization report for: BFS_kernel(unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *&, unsigned int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(83,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
LOOP END

LOOP BEGIN at bfs.cpp(83,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(197,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
   remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
LOOP END

LOOP BEGIN at bfs.cpp(197,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(227,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
LOOP END

LOOP BEGIN at bfs.cpp(227,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(253,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(253,3)
   <Peeled loop for vectorization, Multiversioned v2>
   LOOP END

   LOOP BEGIN at bfs.cpp(253,3)
   <Multiversioned v2>
      remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(254,4) ]
      remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(254,22) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 4.667
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 5 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 5.850 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(253,3)
   <Alternate Alignment Vectorized Loop, Multiversioned v2>
   LOOP END

   LOOP BEGIN at bfs.cpp(253,3)
   <Remainder loop for vectorization, Multiversioned v2>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(59,1)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(61,3) ]
   remark #15389: vectorization support: reference *frontier[i] has unaligned access   [ bfs.cpp(61,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(62,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <h_graph_degrees[*(*frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(61,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(59,1)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(135,2)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *frontier (136:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22) and *frontier (136:20)

   LOOP BEGIN at bfs.cpp(140,3)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between graph_edges[edge_i] (141:19) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22)
      remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22) and graph_edges[edge_i] (141:19)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(171,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)

   LOOP BEGIN at bfs.cpp(181,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(181,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(236,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(247,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(247,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(248,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(248,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: BFS(unsigned int *, unsigned int *, unsigned int *, const unsigned int &, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(293,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(83,2) inlined into bfs.cpp(295,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(83,2) inlined into bfs.cpp(295,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(197,3) inlined into bfs.cpp(295,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
      remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
      remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
      remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(197,3) inlined into bfs.cpp(295,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(227,2) inlined into bfs.cpp(295,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(227,2) inlined into bfs.cpp(295,28)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(295,28)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(295,28)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(295,28)
      <Multiversioned v2>
         remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(254,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(254,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 5.850 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(295,28)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(295,28)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(287,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(287,1)
   remark #15388: vectorization support: reference parents has aligned access   [ bfs.cpp(289,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(287,1)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(59,1) inlined into bfs.cpp(295,28)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(61,3) ]
   remark #15389: vectorization support: reference frontier[i] has unaligned access   [ bfs.cpp(61,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(62,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*h_graph_degrees[*(frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(61,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(59,1) inlined into bfs.cpp(295,28)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(135,2) inlined into bfs.cpp(295,28)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier (136:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22) and frontier (136:20)

   LOOP BEGIN at bfs.cpp(140,3) inlined into bfs.cpp(295,28)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (145:6) and new_frontier_tmp (150:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (150:5) and new_frontier_tmp (145:6)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(171,2) inlined into bfs.cpp(295,28)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)

   LOOP BEGIN at bfs.cpp(181,3) inlined into bfs.cpp(295,28)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(181,3) inlined into bfs.cpp(295,28)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(236,2) inlined into bfs.cpp(295,28)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(295,28)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(295,28)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(295,28)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(248,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(248,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(295,28)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(295,28)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(307,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost[end] (311:4) and h_cost[*(?+end*4)] (311:4)
   remark #15346: vector dependence: assumed ANTI dependence between h_cost[*(?+end*4)] (311:4) and h_cost[end] (311:4)
LOOP END

LOOP BEGIN at bfs.cpp(307,1)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: input(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(370,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(412,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (416:3) and edge_start (413:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (413:3) and edge_start (416:3)
LOOP END

LOOP BEGIN at bfs.cpp(412,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(455,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(455,3)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at bfs.cpp(455,3)
      remark #15388: vectorization support: reference h_cost[i] has aligned access   [ bfs.cpp(456,4) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 3.333
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 0.750 
      remark #15478: estimated potential speedup: 1.940 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(455,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(293,2) inlined into bfs.cpp(480,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(83,2) inlined into bfs.cpp(480,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (85:3) and offset_sum (86:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (86:3) and offset_sum (85:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(83,2) inlined into bfs.cpp(480,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(197,3) inlined into bfs.cpp(480,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
      remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
      remark #15346: vector dependence: assumed ANTI dependence between base (199:5) and base (199:22)
      remark #15346: vector dependence: assumed FLOW dependence between base (199:22) and base (199:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(197,3) inlined into bfs.cpp(480,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(227,2) inlined into bfs.cpp(480,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
      remark #15346: vector dependence: assumed ANTI dependence between offset_sum (229:3) and offset_sum (230:3)
      remark #15346: vector dependence: assumed FLOW dependence between offset_sum (230:3) and offset_sum (229:3)
   LOOP END

   LOOP BEGIN at bfs.cpp(227,2) inlined into bfs.cpp(480,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(480,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(480,3)
      <Peeled loop for vectorization, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(480,3)
      <Multiversioned v2>
         remark #15388: vectorization support: reference new_frontier[i] has aligned access   [ bfs.cpp(254,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp[base] has aligned access   [ bfs.cpp(254,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 5.850 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(480,3)
      <Alternate Alignment Vectorized Loop, Multiversioned v2>
      LOOP END

      LOOP BEGIN at bfs.cpp(253,3) inlined into bfs.cpp(480,3)
      <Remainder loop for vectorization, Multiversioned v2>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(396,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(399,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (399:3) and n2 (401:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (401:3) and n2 (399:3)
LOOP END

LOOP BEGIN at bfs.cpp(287,1) inlined into bfs.cpp(480,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(287,1) inlined into bfs.cpp(480,3)
   remark #15388: vectorization support: reference parents has aligned access   [ bfs.cpp(289,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 3.680 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(287,1) inlined into bfs.cpp(480,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at bfs.cpp(59,1) inlined into bfs.cpp(480,3)
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(61,3) ]
   remark #15389: vectorization support: reference frontier[i] has unaligned access   [ bfs.cpp(61,32) ]
   remark #15389: vectorization support: reference *degrees[i] has unaligned access   [ bfs.cpp(62,24) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15328: vectorization support: irregularly indexed load was emulated for the variable <*h_graph_degrees[*(frontier+i*4)]>, part of index is read from memory   [ bfs.cpp(61,16) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.714
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15462: unmasked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 11 
   remark #15477: vector cost: 14.000 
   remark #15478: estimated potential speedup: 0.770 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(59,1) inlined into bfs.cpp(480,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(135,2) inlined into bfs.cpp(480,3)
   remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier (136:20) and call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22)
   remark #15346: vector dependence: assumed FLOW dependence between call:__sync_bool_compare_and_swap_4(volatile void *, unsigned in (143:22) and frontier (136:20)

   LOOP BEGIN at bfs.cpp(140,3) inlined into bfs.cpp(480,3)
      remark #15382: vectorization support: call to function __sync_bool_compare_and_swap_4(volatile void *, unsigned int, unsigned int) cannot be vectorized   [ bfs.cpp(143,22) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (145:6) and new_frontier_tmp (150:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (150:5) and new_frontier_tmp (145:6)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(171,2) inlined into bfs.cpp(480,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   remark #15346: vector dependence: assumed OUTPUT dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)

   LOOP BEGIN at bfs.cpp(181,3) inlined into bfs.cpp(480,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
      remark #15346: vector dependence: assumed ANTI dependence between new_frontier_tmp (183:5) and new_frontier_tmp (183:5)
   LOOP END

   LOOP BEGIN at bfs.cpp(181,3) inlined into bfs.cpp(480,3)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(236,2) inlined into bfs.cpp(480,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(480,3)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(480,3)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(480,3)
         remark #15388: vectorization support: reference new_frontier has aligned access   [ bfs.cpp(248,4) ]
         remark #15388: vectorization support: reference new_frontier_tmp has aligned access   [ bfs.cpp(248,22) ]
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 4.667
         remark #15300: LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15448: unmasked aligned unit stride loads: 1 
         remark #15449: unmasked aligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 5 
         remark #15477: vector cost: 0.750 
         remark #15478: estimated potential speedup: 2.440 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(480,3)
      <Alternate Alignment Vectorized Loop>
      LOOP END

      LOOP BEGIN at bfs.cpp(247,3) inlined into bfs.cpp(480,3)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(307,1) inlined into bfs.cpp(480,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost (311:4) and h_cost (311:4)
   remark #15346: vector dependence: assumed ANTI dependence between h_cost (311:4) and h_cost (311:4)
LOOP END

LOOP BEGIN at bfs.cpp(307,1) inlined into bfs.cpp(480,3)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at bfs.cpp(444,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(282,2) ]
LOOP END
===========================================================================
