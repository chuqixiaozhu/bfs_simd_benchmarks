Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o page_rank

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(112,2) inlined into page_rank.cpp(220,2)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ page_rank.cpp(113,30) ]
LOOP END

LOOP BEGIN at page_rank.cpp(118,2) inlined into page_rank.cpp(220,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(142,2) inlined into page_rank.cpp(220,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(188,2) inlined into page_rank.cpp(220,2)
      remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(189,3) ]
      remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(189,42) ]
      remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(189,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.222
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(189,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(189,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15467: unmasked aligned streaming stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 38 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 8.440 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(188,2) inlined into page_rank.cpp(220,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(148,2) inlined into page_rank.cpp(220,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ page_rank.cpp(149,3) ]
LOOP END

LOOP BEGIN at page_rank.cpp(158,1) inlined into page_rank.cpp(220,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(158,1) inlined into page_rank.cpp(220,2)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(160,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(161,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(160,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(161,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(158,1) inlined into page_rank.cpp(220,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(176,2) inlined into page_rank.cpp(220,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (181:4) and sum[n2] (181:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (181:4) and sum[n2] (181:4)

   LOOP BEGIN at page_rank.cpp(178,3) inlined into page_rank.cpp(220,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sum[n2] (181:4) and sum[n2] (181:4)
      remark #15346: vector dependence: assumed ANTI dependence between sum[n2] (181:4) and sum[n2] (181:4)
   LOOP END

   LOOP BEGIN at page_rank.cpp(178,3) inlined into page_rank.cpp(220,2)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: input(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(112,2)
   remark #15527: loop was not vectorized: function call to malloc(size_t) cannot be vectorized   [ page_rank.cpp(113,30) ]
LOOP END

LOOP BEGIN at page_rank.cpp(118,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(142,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(188,2) inlined into page_rank.cpp(144,3)
      remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(189,3) ]
      remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(189,42) ]
      remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(189,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.222
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(189,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(189,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15449: unmasked aligned unit stride stores: 1 
      remark #15467: unmasked aligned streaming stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 38 
      remark #15477: vector cost: 4.500 
      remark #15478: estimated potential speedup: 8.440 
      remark #15487: type converts: 2 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(188,2) inlined into page_rank.cpp(144,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(148,2)
   remark #15527: loop was not vectorized: function call to free(void *) cannot be vectorized   [ page_rank.cpp(149,3) ]
LOOP END

LOOP BEGIN at page_rank.cpp(158,1) inlined into page_rank.cpp(144,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(158,1) inlined into page_rank.cpp(144,3)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(160,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(161,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(160,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(161,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(158,1) inlined into page_rank.cpp(144,3)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(176,2) inlined into page_rank.cpp(144,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (181:4) and sum[n2] (181:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (181:4) and sum[n2] (181:4)

   LOOP BEGIN at page_rank.cpp(178,3) inlined into page_rank.cpp(144,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sum[n2] (181:4) and sum[n2] (181:4)
      remark #15346: vector dependence: assumed ANTI dependence between sum[n2] (181:4) and sum[n2] (181:4)
   LOOP END

   LOOP BEGIN at page_rank.cpp(178,3) inlined into page_rank.cpp(144,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: page_rank(unsigned int **, unsigned int **, unsigned int *, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(188,2)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(189,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(189,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(189,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.222
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(189,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(189,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(188,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(158,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(158,1)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(160,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(161,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(160,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(161,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 3.990 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(158,1)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(176,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (181:4) and sum[n2] (181:4)
   remark #15346: vector dependence: assumed OUTPUT dependence between sum[n2] (181:4) and sum[n2] (181:4)

   LOOP BEGIN at page_rank.cpp(178,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between sum[n2] (181:4) and sum[n2] (181:4)
      remark #15346: vector dependence: assumed ANTI dependence between sum[n2] (181:4) and sum[n2] (181:4)
   LOOP END

   LOOP BEGIN at page_rank.cpp(178,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: print()

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(196,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(198,3) ]
LOOP END
===========================================================================
