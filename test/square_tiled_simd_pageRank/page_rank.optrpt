Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o page_rank

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(153,2) inlined into page_rank.cpp(296,2)
   remark #15388: vectorization support: reference offsets[i] has aligned access   [ page_rank.cpp(154,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 10.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(153,2) inlined into page_rank.cpp(296,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(158,2) inlined into page_rank.cpp(296,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(184,2) inlined into page_rank.cpp(296,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(211,2) inlined into page_rank.cpp(296,2)
      remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(212,3) ]
      remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(213,3) ]
      remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(212,3) ]
      remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(213,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15467: unmasked aligned streaming stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(211,2) inlined into page_rank.cpp(296,2)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(235,37) inlined into page_rank.cpp(296,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at page_rank.cpp(221,2) inlined into page_rank.cpp(296,2)
      remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(246,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5) and call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21)

      LOOP BEGIN at page_rank.cpp(231,3) inlined into page_rank.cpp(296,2)
         remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(246,5) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5)
         remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5) and call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21)

         LOOP BEGIN at page_rank.cpp(198,2) inlined into page_rank.cpp(296,2)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
            remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
         LOOP END
      LOOP END

      LOOP BEGIN at page_rank.cpp(198,2) inlined into page_rank.cpp(296,2)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
         remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(261,1) inlined into page_rank.cpp(296,2)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(261,1) inlined into page_rank.cpp(296,2)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(263,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(263,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(263,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(263,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(263,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(261,1) inlined into page_rank.cpp(296,2)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: input(char *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(153,2)
   remark #15388: vectorization support: reference offsets[i] has aligned access   [ page_rank.cpp(154,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 10.667
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 4 
   remark #15477: vector cost: 0.750 
   remark #15478: estimated potential speedup: 4.660 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(153,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(158,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at page_rank.cpp(184,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at page_rank.cpp(211,2) inlined into page_rank.cpp(186,3)
      remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(212,3) ]
      remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(213,3) ]
      remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(212,3) ]
      remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(213,3) ]
      remark #15305: vectorization support: vector length 4
      remark #15300: LOOP WAS VECTORIZED
      remark #15449: unmasked aligned unit stride stores: 2 
      remark #15467: unmasked aligned streaming stores: 2 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 6 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 4.000 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at page_rank.cpp(211,2) inlined into page_rank.cpp(186,3)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(235,37) inlined into page_rank.cpp(186,3)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at page_rank.cpp(221,2) inlined into page_rank.cpp(186,3)
      remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(246,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5) and call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21)

      LOOP BEGIN at page_rank.cpp(231,3) inlined into page_rank.cpp(186,3)
         remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(246,5) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21) and call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5)
         remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned i (246:5) and call:_mm512_i32extgather_ps(__m512i, const void *, unsigned int, (240:21)

         LOOP BEGIN at page_rank.cpp(198,2) inlined into page_rank.cpp(186,3)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
            remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
         LOOP END
      LOOP END

      LOOP BEGIN at page_rank.cpp(198,2) inlined into page_rank.cpp(186,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
         remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(261,1) inlined into page_rank.cpp(186,3)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(261,1) inlined into page_rank.cpp(186,3)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(263,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(263,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(263,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(263,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(263,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(261,1) inlined into page_rank.cpp(186,3)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: page_rank(unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int)

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(211,2)
   remark #15388: vectorization support: reference rank[i] has aligned access   [ page_rank.cpp(212,3) ]
   remark #15388: vectorization support: reference sum[i] has aligned access   [ page_rank.cpp(213,3) ]
   remark #15412: vectorization support: streaming store was generated for rank[i]   [ page_rank.cpp(212,3) ]
   remark #15412: vectorization support: streaming store was generated for sum[i]   [ page_rank.cpp(213,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15300: LOOP WAS VECTORIZED
   remark #15449: unmasked aligned unit stride stores: 2 
   remark #15467: unmasked aligned streaming stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 6 
   remark #15477: vector cost: 1.500 
   remark #15478: estimated potential speedup: 4.000 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(211,2)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(219,1)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification

   LOOP BEGIN at page_rank.cpp(221,2)
      remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(246,5) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between (tiles_n1+(*(offsets+i*4))*4)[j] (234:19) and sum[*(n2s+i*4)] (202:3)
      remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and (tiles_n1+(*(offsets+i*4))*4)[j] (234:19)

      LOOP BEGIN at page_rank.cpp(231,3)
         remark #15382: vectorization support: call to function _mm512_i32extscatter_ps(void *, __m512i, __m512, unsigned int, int, int) cannot be vectorized   [ page_rank.cpp(246,5) ]
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed ANTI dependence between (tiles_n1+(*(offsets+i*4))*4)[j] (234:19) and sum[*(n2s+i*4)] (202:3)
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and (tiles_n1+(*(offsets+i*4))*4)[j] (234:19)

         LOOP BEGIN at page_rank.cpp(198,2) inlined into page_rank.cpp(249,5)
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
            remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
         LOOP END
      LOOP END

      LOOP BEGIN at page_rank.cpp(198,2) inlined into page_rank.cpp(253,3)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization
         remark #15346: vector dependence: assumed FLOW dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
         remark #15346: vector dependence: assumed ANTI dependence between sum[*(n2s+i*4)] (202:3) and sum[*(n2s+i*4)] (202:3)
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at page_rank.cpp(261,1)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at page_rank.cpp(261,1)
   remark #15388: vectorization support: reference rank[j] has aligned access   [ page_rank.cpp(263,3) ]
   remark #15388: vectorization support: reference sum[j] has aligned access   [ page_rank.cpp(263,42) ]
   remark #15412: vectorization support: streaming store was generated for rank[j]   [ page_rank.cpp(263,3) ]
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.778
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ page_rank.cpp(263,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ page_rank.cpp(263,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15449: unmasked aligned unit stride stores: 1 
   remark #15467: unmasked aligned streaming stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 38 
   remark #15477: vector cost: 4.500 
   remark #15478: estimated potential speedup: 8.440 
   remark #15487: type converts: 2 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at page_rank.cpp(261,1)
<Remainder loop for vectorization>
LOOP END
===========================================================================

Begin optimization report for: print()

    Report from: Vector optimizations [vec]


LOOP BEGIN at page_rank.cpp(270,2)
   remark #15527: loop was not vectorized: function call to fprintf(FILE *, const char *, ...) cannot be vectorized   [ page_rank.cpp(272,3) ]
LOOP END
===========================================================================
