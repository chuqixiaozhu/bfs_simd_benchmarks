Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++14 -qopenmp -O3 -xMIC-AVX512 -qopt-report=5 -qopt-report-phase=vec -inline-level=2 -inline-forceinline -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(919,2) inlined into bfs.cpp(1123,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(937,2) inlined into bfs.cpp(1123,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(980,2) inlined into bfs.cpp(1123,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (985:3) and edge_start (983:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (983:3) and edge_start (985:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (983:3) and edge_start (985:3)
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (985:3) and edge_start (983:3)
LOOP END

LOOP BEGIN at bfs.cpp(980,2) inlined into bfs.cpp(1123,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(1016,2) inlined into bfs.cpp(1123,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(1025,3) inlined into bfs.cpp(1123,2)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at bfs.cpp(1025,3) inlined into bfs.cpp(1123,2)
         remark #15389: vectorization support: reference h_cost[i] has unaligned access   [ bfs.cpp(1026,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 0.600
         remark #15300: LOOP WAS VECTORIZED
         remark #15451: unmasked unaligned unit stride stores: 1 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 3 
         remark #15477: vector cost: 0.310 
         remark #15478: estimated potential speedup: 4.000 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at bfs.cpp(1025,3) inlined into bfs.cpp(1123,2)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference h_cost[i] has unaligned access   [ bfs.cpp(1026,4) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 16
         remark #15309: vectorization support: normalized vectorization overhead 1.364
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(963,2) inlined into bfs.cpp(1123,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(966,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (966:3) and n2 (968:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (968:3) and n2 (966:3)
LOOP END

LOOP BEGIN at bfs.cpp(1032,1) inlined into bfs.cpp(1123,2)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(1034,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
LOOP END

LOOP BEGIN at bfs.cpp(1032,1) inlined into bfs.cpp(1123,2)
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(1034,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(1032,1) inlined into bfs.cpp(1123,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(1034,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.364
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
