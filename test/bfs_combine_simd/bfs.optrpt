Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -I/home/zpeng/lib/include -Wall -Wextra -g -std=c++14 -qopenmp -O3 -xMIC-AVX512 -qopt-report=5 -qopt-report-phase=vec -inline-level=2 -inline-forceinline -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(833,2) inlined into bfs.cpp(1080,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(838,2) inlined into bfs.cpp(1080,2)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(840,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(840,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(842,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(842,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(838,2) inlined into bfs.cpp(1080,2)
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(840,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(842,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <tile_offsets[i+1]>, masked, part of index is linear but may overflow   [ bfs.cpp(840,20) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.415
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 2.560 
   remark #15478: estimated potential speedup: 6.150 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(838,2) inlined into bfs.cpp(1080,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(840,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(840,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(842,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(842,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(898,2) inlined into bfs.cpp(1080,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(938,2) inlined into bfs.cpp(1080,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (940:3) and edge_start (939:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (939:3) and edge_start (940:3)
LOOP END

LOOP BEGIN at bfs.cpp(938,2) inlined into bfs.cpp(1080,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(975,2) inlined into bfs.cpp(1080,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(999,3) ]
LOOP END

LOOP BEGIN at bfs.cpp(871,2) inlined into bfs.cpp(1080,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(874,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (874:3) and n2 (876:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (876:3) and n2 (874:3)
LOOP END

LOOP BEGIN at bfs.cpp(924,2) inlined into bfs.cpp(1080,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(927,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (927:3) and n2 (929:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (929:3) and n2 (927:3)
LOOP END

LOOP BEGIN at bfs.cpp(985,1) inlined into bfs.cpp(1080,2)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at bfs.cpp(985,1) inlined into bfs.cpp(1080,2)
      remark #15389: vectorization support: reference h_cost has unaligned access   [ bfs.cpp(987,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.410 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(985,1) inlined into bfs.cpp(1080,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(993,1) inlined into bfs.cpp(1080,2)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(995,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
LOOP END

LOOP BEGIN at bfs.cpp(993,1) inlined into bfs.cpp(1080,2)
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(995,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(993,1) inlined into bfs.cpp(1080,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(995,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.364
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

Begin optimization report for: BFS_dense(unsigned int *, unsigned int *, int *, int *, unsigned int *, int *, unsigned int *, unsigned int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(237,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bfs.cpp(152,2) inlined into bfs.cpp(238,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(159,3) inlined into bfs.cpp(238,3)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at bfs.cpp(167,4) inlined into bfs.cpp(238,3)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(238,3)
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(238,3)
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(152,2) inlined into bfs.cpp(254,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(159,3) inlined into bfs.cpp(254,2)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at bfs.cpp(167,4) inlined into bfs.cpp(254,2)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(254,2)
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(254,2)
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: to_dense(int *, int *, unsigned int *, const unsigned int &)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(478,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between frontier[i] (480:24) and is_active_side[vertex_id/TILE_WIDTH] (482:3)
   remark #15346: vector dependence: assumed FLOW dependence between is_active_side[vertex_id/TILE_WIDTH] (482:3) and frontier[i] (480:24)
LOOP END
===========================================================================

Begin optimization report for: to_sparse(unsigned int *, const unsigned int &, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(519,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between offset_sum (522:4) and offset_sum (521:4)
   remark #15346: vector dependence: assumed ANTI dependence between offset_sum (521:4) and offset_sum (522:4)
LOOP END

LOOP BEGIN at bfs.cpp(519,3)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(544,3)
<Peeled loop for vectorization>
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.826
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(544,3)
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.000
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15457: masked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 13 
   remark #15477: vector cost: 0.870 
   remark #15478: estimated potential speedup: 12.660 
   remark #15488: --- end vector cost summary ---
   remark #15497: vector compress: 1 
LOOP END

LOOP BEGIN at bfs.cpp(544,3)
<Remainder loop for vectorization>
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.826
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(502,3)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive   [ bfs.cpp(510,4) ]

   LOOP BEGIN at bfs.cpp(510,4)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization   [ bfs.cpp(511,5) ]
   LOOP END

   LOOP BEGIN at bfs.cpp(510,4)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(526,3)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at bfs.cpp(535,4)
   <Peeled loop for vectorization>
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.826
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at bfs.cpp(535,4)
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 1.000
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15457: masked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 13 
      remark #15477: vector cost: 0.870 
      remark #15478: estimated potential speedup: 12.660 
      remark #15488: --- end vector cost summary ---
      remark #15497: vector compress: 1 
   LOOP END

   LOOP BEGIN at bfs.cpp(535,4)
   <Remainder loop for vectorization>
      remark #15305: vectorization support: vector length 16
      remark #15309: vectorization support: normalized vectorization overhead 0.826
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: input(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(833,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(838,2)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(840,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(840,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(842,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(842,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(838,2)
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(840,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(842,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15415: vectorization support: irregularly indexed load was generated for the variable <tile_offsets[i+1]>, masked, part of index is linear but may overflow   [ bfs.cpp(840,20) ]
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.415
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15458: masked indexed (or gather) loads: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 18 
   remark #15477: vector cost: 2.560 
   remark #15478: estimated potential speedup: 6.150 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(838,2)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(840,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(840,42) ]
   remark #15389: vectorization support: reference tile_sizes[i] has unaligned access   [ bfs.cpp(842,4) ]
   remark #15389: vectorization support: reference tile_offsets[i] has unaligned access   [ bfs.cpp(842,29) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 0.475
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at bfs.cpp(898,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(938,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between edge_start (940:3) and edge_start (939:3)
   remark #15346: vector dependence: assumed ANTI dependence between edge_start (939:3) and edge_start (940:3)
LOOP END

LOOP BEGIN at bfs.cpp(938,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(975,2)
   remark #15333: loop was not vectorized: exception handling for a call prevents vectorization   [ bfs.cpp(999,3) ]
LOOP END

LOOP BEGIN at bfs.cpp(871,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(874,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (874:3) and n2 (876:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (876:3) and n2 (874:3)
LOOP END

LOOP BEGIN at bfs.cpp(924,2)
   remark #15382: vectorization support: call to function fscanf(FILE *, const char *, ...) cannot be vectorized   [ bfs.cpp(927,3) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (927:3) and n2 (929:3)
   remark #15346: vector dependence: assumed OUTPUT dependence between n2 (929:3) and n2 (927:3)
LOOP END

LOOP BEGIN at bfs.cpp(985,1)
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at bfs.cpp(985,1)
      remark #15389: vectorization support: reference h_cost has unaligned access   [ bfs.cpp(987,4) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.500
      remark #15451: unmasked unaligned unit stride stores: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 3 
      remark #15477: vector cost: 1.500 
      remark #15478: estimated potential speedup: 1.410 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at bfs.cpp(985,1)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(993,1)
<Peeled loop for vectorization>
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(995,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 1.250
LOOP END

LOOP BEGIN at bfs.cpp(993,1)
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(995,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 3.333
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 3 
   remark #15477: vector cost: 0.180 
   remark #15478: estimated potential speedup: 12.320 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(993,1)
<Remainder loop for vectorization>
   remark #15389: vectorization support: reference h_graph_parents has unaligned access   [ bfs.cpp(995,4) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15305: vectorization support: vector length 16
   remark #15309: vectorization support: normalized vectorization overhead 1.364
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END
===========================================================================

Begin optimization report for: graph_prepare(unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, const unsigned int &, int *, int *, int *, int *, int *)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(636,2)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(237,2) inlined into bfs.cpp(648,4)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(478,1) inlined into bfs.cpp(640,5)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_graph_mask (481:3) and TILE_WIDTH (482:3)
   remark #15346: vector dependence: assumed ANTI dependence between TILE_WIDTH (482:3) and h_graph_mask (481:3)
LOOP END

LOOP BEGIN at bfs.cpp(152,2) inlined into bfs.cpp(648,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(159,3) inlined into bfs.cpp(648,4)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at bfs.cpp(167,4) inlined into bfs.cpp(648,4)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(648,4)
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(648,4)
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(152,2) inlined into bfs.cpp(648,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(159,3) inlined into bfs.cpp(648,4)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at bfs.cpp(167,4) inlined into bfs.cpp(648,4)
         remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

         LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(648,4)
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
            remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
            remark #15344: loop was not vectorized: vector dependence prevents vectorization
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
            remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at bfs.cpp(79,2) inlined into bfs.cpp(648,4)
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(96,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(97,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(100,3) ]
      remark #15382: vectorization support: call to function _mm512_mask_i32extscatter_epi32(void *, unsigned short, __m512i, __m512i, unsigned int, int, int) cannot be vectorized   [ bfs.cpp(101,3) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27) and call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3)
      remark #15346: vector dependence: assumed OUTPUT dependence between call:_mm512_mask_i32extscatter_epi32(void *, unsigned short, __m (101:3) and call:_mm512_i32extgather_epi32(__m512i, const void *, unsigned i (81:27)
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(761,1)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed FLOW dependence between h_cost[end] (765:5) and h_graph_degrees[end] (766:5)
   remark #15346: vector dependence: assumed ANTI dependence between h_graph_degrees[end] (766:5) and h_cost[end] (765:5)
LOOP END

LOOP BEGIN at bfs.cpp(761,1)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(693,4)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at bfs.cpp(720,5)
      remark #15382: vectorization support: call to function _mm512_mask_storeu_epi32(void *, unsigned short, __m512i) cannot be vectorized   [ bfs.cpp(729,6) ]
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed ANTI dependence between h_updating_graph_mask[vertex_id] (723:32) and h_graph_mask[vertex_id] (730:6)
      remark #15346: vector dependence: assumed FLOW dependence between h_graph_mask[vertex_id] (730:6) and h_updating_graph_mask[vertex_id] (723:32)
   LOOP END
LOOP END
===========================================================================
