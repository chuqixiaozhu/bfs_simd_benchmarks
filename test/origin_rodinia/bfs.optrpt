Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -std=c++11 -qopenmp -O3 -qopt-report=5 -qopt-report-phase=vec -o bfs

Begin optimization report for: main(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(204,29) inlined into bfs.cpp(35,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bfs.cpp(149,2) inlined into bfs.cpp(35,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(185,3) inlined into bfs.cpp(35,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(191,63) inlined into bfs.cpp(35,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(216,3) inlined into bfs.cpp(35,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between h_cost (231:7) and h_cost (231:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between h_cost (231:7) and h_cost (231:7)

   LOOP BEGIN at bfs.cpp(224,5) inlined into bfs.cpp(35,2)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between h_cost (231:7) and h_cost (231:7)
      remark #15346: vector dependence: assumed ANTI dependence between h_cost (231:7) and h_cost (231:7)
   LOOP END

   LOOP BEGIN at bfs.cpp(224,5) inlined into bfs.cpp(35,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(238,1) inlined into bfs.cpp(35,2)
   remark #15389: vectorization support: reference h_graph_mask has unaligned access   [ bfs.cpp(243,5) ]
   remark #15389: vectorization support: reference h_graph_visited has unaligned access   [ bfs.cpp(244,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(246,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(246,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.072
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15457: masked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 34.750 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(238,1) inlined into bfs.cpp(35,2)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(271,2) inlined into bfs.cpp(35,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================

Begin optimization report for: BFSGraph(int, char **)

    Report from: Vector optimizations [vec]


LOOP BEGIN at bfs.cpp(204,29)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bfs.cpp(149,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(185,3)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(191,63)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END

LOOP BEGIN at bfs.cpp(216,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between h_cost (231:7) and h_cost (231:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between h_cost (231:7) and h_cost (231:7)

   LOOP BEGIN at bfs.cpp(224,5)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between h_cost (231:7) and h_cost (231:7)
      remark #15346: vector dependence: assumed ANTI dependence between h_cost (231:7) and h_cost (231:7)
   LOOP END

   LOOP BEGIN at bfs.cpp(224,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(238,1)
   remark #15389: vectorization support: reference h_graph_mask has unaligned access   [ bfs.cpp(243,5) ]
   remark #15389: vectorization support: reference h_graph_visited has unaligned access   [ bfs.cpp(244,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(246,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(246,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.072
   remark #15450: unmasked unaligned unit stride loads: 1 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15457: masked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 20 
   remark #15477: vector cost: 34.750 
   remark #15478: estimated potential speedup: 0.570 
   remark #15488: --- end vector cost summary ---
LOOP END

LOOP BEGIN at bfs.cpp(238,1)
<Remainder>
LOOP END

LOOP BEGIN at bfs.cpp(271,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
LOOP END
===========================================================================
