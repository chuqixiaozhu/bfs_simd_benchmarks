Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 17.0.1.132 Build 20161005

Compiler options: -Wall -Wextra -g -qopenmp -O3 -qopt-report=5 -vec-threshold100 -o bfs_auto

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/4=25.0%] bfs.cpp(31,1)
  -> INLINE: (32,2) BFSGraph(int, char **) (isz = 295) (sz = 303)
    -> INLINE: (49,2) Usage(char **) (isz = 5) (sz = 10)
      -> EXTERN: (24,1) fprintf(FILE *, const char *, ...)
    -> EXTERN: (50,2) exit(int)
    -> INLINE (MANUAL): (53,20) atoi(const char *) (isz = 7) (sz = 14)
      -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *, char **, int)
    -> EXTERN: (58,7) fopen(const char *, const char *)
    -> EXTERN: (61,3) printf(const char *, ...)
    -> EXTERN: (67,2) fscanf(FILE *, const char *, ...)
    -> EXTERN: (70,32) malloc(size_t)
    -> EXTERN: (71,31) malloc(size_t)
    -> EXTERN: (72,40) malloc(size_t)
    -> EXTERN: (73,34) malloc(size_t)
    -> EXTERN: (79,3) fscanf(FILE *, const char *, ...)
    -> EXTERN: (88,2) fscanf(FILE *, const char *, ...)
    -> EXTERN: (95,2) fscanf(FILE *, const char *, ...)
    -> EXTERN: (98,30) malloc(size_t)
    -> EXTERN: (101,3) fscanf(FILE *, const char *, ...)
    -> EXTERN: (102,3) fscanf(FILE *, const char *, ...)
    -> EXTERN: (107,3) fclose(FILE *)
    -> EXTERN: (120,29) omp_get_wtime()
    -> EXTERN: (129,3) omp_set_num_threads(int)
    -> EXTERN: (166,27) omp_get_wtime()
    -> EXTERN: (169,3) printf(const char *, ...)
    -> EXTERN: (179,2) free(void *)
    -> EXTERN: (180,2) free(void *)
    -> EXTERN: (181,2) free(void *)
    -> EXTERN: (182,2) free(void *)
    -> EXTERN: (183,2) free(void *)


    Report from: OpenMP optimizations [openmp]

bfs.cpp(130:1-130:1):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED
bfs.cpp(151:1-151:1):OMP:main:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at bfs.cpp(77,2) inlined into bfs.cpp(32,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at bfs.cpp(99,2) inlined into bfs.cpp(32,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at bfs.cpp(122,2) inlined into bfs.cpp(32,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bfs.cpp(132,3) inlined into bfs.cpp(32,2)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)

   LOOP BEGIN at bfs.cpp(137,5) inlined into bfs.cpp(32,2)
      remark #15389: vectorization support: reference h_graph_edges has unaligned access   [ bfs.cpp(141,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <h_graph_visited>, part of index is read from memory   [ bfs.cpp(142,10) ]
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <h_updating_graph_mask>, masked, part of index is read from memory   [ bfs.cpp(145,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.019
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 23 
      remark #15477: vector cost: 38.500 
      remark #15478: estimated potential speedup: 0.590 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at bfs.cpp(137,5) inlined into bfs.cpp(32,2)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(151,1) inlined into bfs.cpp(32,2)
   remark #15389: vectorization support: reference h_graph_mask has unaligned access   [ bfs.cpp(156,5) ]
   remark #15389: vectorization support: reference h_graph_visited has unaligned access   [ bfs.cpp(157,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.092
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15457: masked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 35.500 
   remark #15478: estimated potential speedup: 0.590 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at bfs.cpp(151,1) inlined into bfs.cpp(32,2)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

bfs.cpp(31,1):remark #34051: REGISTER ALLOCATION : [main] bfs.cpp:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     354
            Global    :     105
            Local     :     249
        Regenerable   :     141
        Spilled       :       3
        
    Routine stack
        Variables     :     109 bytes*
            Reads     :      31 [4.88e+01 ~ 2.4%]
            Writes    :      20 [1.77e+02 ~ 8.8%]
        Spills        :      64 bytes*
            Reads     :      18 [1.24e+01 ~ 0.6%]
            Writes    :      18 [4.88e+01 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Usage(char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Usage(char **)) [3/4=75.0%] bfs.cpp(22,24)
  -> EXTERN: (24,1) fprintf(FILE *, const char *, ...)


    Report from: Code generation optimizations [cg]

bfs.cpp(22,24):remark #34051: REGISTER ALLOCATION : [_Z5UsagePPc] bfs.cpp:22

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    4[ rax rdx rsi rdi]
        
    Routine temporaries
        Total         :      15
            Global    :       0
            Local     :      15
        Regenerable   :       3
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: BFSGraph(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BFSGraph(int, char **)) [4/4=100.0%] bfs.cpp(41,1)
  -> INLINE: (49,2) Usage(char **) (isz = 5) (sz = 10)
    -> EXTERN: (24,1) fprintf(FILE *, const char *, ...)
  -> EXTERN: (50,2) exit(int)
  -> INLINE (MANUAL): (53,20) atoi(const char *) (isz = 7) (sz = 14)
    -> EXTERN: /usr/include/stdlib.h:(280,16) strtol(const char *, char **, int)
  -> EXTERN: (58,7) fopen(const char *, const char *)
  -> EXTERN: (61,3) printf(const char *, ...)
  -> EXTERN: (67,2) fscanf(FILE *, const char *, ...)
  -> EXTERN: (70,32) malloc(size_t)
  -> EXTERN: (71,31) malloc(size_t)
  -> EXTERN: (72,40) malloc(size_t)
  -> EXTERN: (73,34) malloc(size_t)
  -> EXTERN: (79,3) fscanf(FILE *, const char *, ...)
  -> EXTERN: (88,2) fscanf(FILE *, const char *, ...)
  -> EXTERN: (95,2) fscanf(FILE *, const char *, ...)
  -> EXTERN: (98,30) malloc(size_t)
  -> EXTERN: (101,3) fscanf(FILE *, const char *, ...)
  -> EXTERN: (102,3) fscanf(FILE *, const char *, ...)
  -> EXTERN: (107,3) fclose(FILE *)
  -> EXTERN: (120,29) omp_get_wtime()
  -> EXTERN: (129,3) omp_set_num_threads(int)
  -> EXTERN: (166,27) omp_get_wtime()
  -> EXTERN: (169,3) printf(const char *, ...)
  -> EXTERN: (179,2) free(void *)
  -> EXTERN: (180,2) free(void *)
  -> EXTERN: (181,2) free(void *)
  -> EXTERN: (182,2) free(void *)
  -> EXTERN: (183,2) free(void *)


    Report from: OpenMP optimizations [openmp]

bfs.cpp(130:1-130:1):OMP:_Z8BFSGraphiPPc:  OpenMP DEFINED LOOP WAS PARALLELIZED
bfs.cpp(151:1-151:1):OMP:_Z8BFSGraphiPPc:  OpenMP DEFINED LOOP WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at bfs.cpp(77,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at bfs.cpp(99,2)
   remark #15523: loop was not vectorized: loop control variable i was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at bfs.cpp(122,2)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at bfs.cpp(132,3)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)
   remark #15346: vector dependence: assumed OUTPUT dependence between h_updating_graph_mask (145:7) and h_updating_graph_mask (145:7)

   LOOP BEGIN at bfs.cpp(137,5)
      remark #15389: vectorization support: reference h_graph_edges has unaligned access   [ bfs.cpp(141,15) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15328: vectorization support: irregularly indexed load was emulated for the variable <h_graph_visited>, part of index is read from memory   [ bfs.cpp(142,10) ]
      remark #15329: vectorization support: irregularly indexed store was emulated for the variable <h_updating_graph_mask>, masked, part of index is read from memory   [ bfs.cpp(145,7) ]
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 0.019
      remark #15450: unmasked unaligned unit stride loads: 1 
      remark #15459: masked indexed (or scatter) stores: 1 
      remark #15462: unmasked indexed (or gather) loads: 1 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 23 
      remark #15477: vector cost: 38.500 
      remark #15478: estimated potential speedup: 0.590 
      remark #15487: type converts: 1 
      remark #15488: --- end vector cost summary ---
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at bfs.cpp(137,5)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at bfs.cpp(151,1)
   remark #15389: vectorization support: reference h_graph_mask has unaligned access   [ bfs.cpp(156,5) ]
   remark #15389: vectorization support: reference h_graph_visited has unaligned access   [ bfs.cpp(157,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
   remark #15389: vectorization support: reference h_updating_graph_mask has unaligned access   [ bfs.cpp(159,5) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #15305: vectorization support: vector length 4
   remark #15309: vectorization support: normalized vectorization overhead 0.092
   remark #15450: unmasked unaligned unit stride loads: 2 
   remark #15451: unmasked unaligned unit stride stores: 1 
   remark #15457: masked unaligned unit stride stores: 2 
   remark #15475: --- begin vector cost summary ---
   remark #15476: scalar cost: 21 
   remark #15477: vector cost: 35.500 
   remark #15478: estimated potential speedup: 0.590 
   remark #15487: type converts: 1 
   remark #15488: --- end vector cost summary ---
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at bfs.cpp(151,1)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

bfs.cpp(41,1):remark #34051: REGISTER ALLOCATION : [_Z8BFSGraphiPPc] bfs.cpp:41

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm15]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     346
            Global    :     105
            Local     :     241
        Regenerable   :     129
        Spilled       :       2
        
    Routine stack
        Variables     :     105 bytes*
            Reads     :      29 [4.88e+01 ~ 2.4%]
            Writes    :      18 [1.77e+02 ~ 8.7%]
        Spills        :      64 bytes*
            Reads     :      26 [9.17e+00 ~ 0.5%]
            Writes    :      20 [6.01e+01 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================
